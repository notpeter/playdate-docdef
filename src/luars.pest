/*
    Maybe do:
    * Handle tabs and "Â " (non-breaking space)
    * Handle comments
    * Re-evaluate Pest Implicit whitepsace: https://pest.rs/book/grammars/syntax.html#implicit-whitespace
    * Handle newlines in W whitepsace
    * Re-evlate
    * Switch from "\n" to NEWLINE ("\n" | "\r\n" | "\r")
    * Unicode support (not today satan)
*/
Document = { Statement* }
Statement = _{
    (
        WHITE_LINE
        | ((Module | Function | Constant | Variable | Object) ~ ";" ~ W ~ "\n"?)
    )
}
Mod = _{ "mod " }
Let = _{ "let " }
Con = _{ "con " }
Fun = _{ "fun " }
Obj = _{ "obj " }

Module = {
    Mod ~ W ~ Identifier ~ W
}
Variable = {
	Let ~ W ~ Identifier ~ W ~ ":" ~ W ~ TypeLua ~ W
}
Constant = {
    Con ~ W ~ Identifier ~ W ~ ":" ~ W ~ ConsType ~ W ~ "=" ~ W ~ IntegerValue ~ W
}
Function = {
    Fun ~ W
    ~ FunctionName ~ W
    ~ oParen ~ W
    ~ FunctionalParameters? ~ W
    ~ cParen
    ~ Return?
}
Return = {
    (
        (":" ~ W ~ TypeLua ~ W)
        | (":" ~ W ~ oParen ~ W ~ FunctionalParameters? ~ W ~ cParen ~ W)
    )
    ~ Optional?
}
Object = {
    Obj ~ W ~ Identifier ~ W
    ~ (":" ~ W ~ TypeLua ~ W)
    ~ ("=" ~ W ~ "{" ~ W ~ TablePrototype? ~ W ~ "}" ~ W)
}
FunctionName = {
    (Identifier ~ ":" ~ Identifier)
    | Identifier
}

FunctionalParameters = {
    VariableParameter
    | ((FunctionalParameter ~ W ~ ("," ~ W ~ FunctionalParameter)*) ~ ("," ~ W ~ "...")? ~ ","?)
}

TablePrototype = {
    TableKey ~ W ~ ":" ~ W ~ TypeLua
    ~ ("," ~ W ~ TableKey ~ W ~ ":" ~ W ~ TypeLua)*
    ~ W ~ ","?
}
TableKey = !{
    ( DotDotDot | QuotedString | LuaIdentifier) ~ Optional?
	| (LuaIdentifier ~ Optional? ~ W ~ ":" ~ W ~ (TypeLua))
}
DotDotDot = { "..." }
// these optionals and ... are overly friendly
// foo(bar?: integer): (baz:integer?, boop:string?)
FunctionalParameter  = { ParameterIdentifier ~ W ~ ":" ~ W ~ TypeLua ~ Optional?}
ParameterIdentifier = { ("..." | LuaIdentifier) ~ Optional? }
VariableParameter = { DotDotDot ~ Optional? ~ W ~ ":" ~ W ~ TypeLua ~ Optional?}

oParen = _{ "(" }
cParen = _{ ")" }

Optional = { "?" }
Identifier = @{
    LuaIdentifier ~ ("." ~ LuaIdentifier)*
}
LuaIdentifier = @{ ( "_" | ASCII_ALPHA ) ~ ("_" | ASCII_DIGIT | ASCII_ALPHA)* }

IntegerValue = { ("-"? ~ ASCII_DIGIT+) }

TypeLua = @{
    LT
    | "(" ~ W ~ LT ~ W ~ ("|" ~ W ~ LT ~ W)+ ~ ")"
}
LT = _{
    | ("fun(" ~ W ~ FunctionalParameters? ~ W ~ ")" ~ W ~ (":" ~ W ~ UnparsedType ~ Optional? ~ W)?)
    | ("table<" ~ W ~ Identifier ~ W ~ "," ~ W ~ TypeLua ~ W ~ ">" ~ W)
    | UnparsedType
}
UnparsedType = _{
	Identifier
    ~ ("[][][]" | "[][]" | "[]")?
}

QuotedString = _{ Quote ~ StringLiteral ~ Quote }
Quote = _{ "\"" }
StringLiteral = { QuotedChar* }
QuotedChar = _{ !"\"" ~ ANY }


// TypeLua = @{
//     (LuaCatsBuiltIn ~ "?")
//   | (LuaCatsBuiltIn ~ "[]")
//   | (LuaCatsBuiltIn ~ ("|" ~ LuaCatsBuiltIn)*)
// }

// LuaCatsBuiltIn = { "any" | "nil" | "boolean" | "string" | "number" | "function" | "table" | "userdata" | "thread" | "integer" | "float" }
// LuaTypes_non_nil = @{ "boolean" | "string" | "number" | "function" | "table" | "userdata" | "thread" | "integer" | "float" }
ConsType = { "boolean" | "string" | "number" | "integer" | "float" }
W = _{ " "* }
WHITE_LINE = _{ " "* ~ "\n" }
