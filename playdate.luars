global json;
fun json.decode(str: string): table;
fun json.decodeFile(file: _File): table;
fun json.decodeFile(path: string): table;
fun json.encode(table: table): string;
fun json.encodePretty(table: table): string;
fun json.encodeToFile(file: _File, pretty: boolean, table: table): nil;
fun json.encodeToFile(path: string, pretty?: boolean, table?: table): nil;

global kTextAlignment = {
    left: integer = 0,
    right: integer = 1,
    center: integer = 2,
};

global playdate = {
    argv: string[],
    isSimulator: boolean,
    kButtonLeft: integer = 1,
    kButtonRight: integer = 2,
    kButtonUp: integer = 4,
    kButtonDown: integer = 8,
    kButtonB: integer = 16,
    kButtonA: integer = 32,
    metadate: _Metadata,
    systeminfo: _SystemInfo,
};
fun playdate.AButtonDown(): nil;
fun playdate.AButtonHeld(): nil;
fun playdate.AButtonUp(): nil;
fun playdate.BButtonDown(): nil;
fun playdate.BButtonHeld(): nil;
fun playdate.BButtonUp(): nil;
fun playdate.GMTTimeFromEpoch(seconds: integer, milliseconds: integer): _DateTime;
fun playdate.accelerometerIsRunning(): boolean;
fun playdate.apiVersion(): (api_version: integer, runtime_minimum_api_version: integer);
fun playdate.buttonIsPressed(button: integer): boolean;
fun playdate.buttonJustPressed(button: integer): boolean;
fun playdate.buttonJustReleased(button: integer): boolean;
fun playdate.clearConsole(): nil;
fun playdate.crankDocked(): nil;
fun playdate.crankUndocked(): nil;
fun playdate.cranked(change: number, acceleratedChange: number): nil;
fun playdate.debugDraw(): nil;
fun playdate.deviceDidUnlock(): nil;
fun playdate.deviceWillLock(): nil;
fun playdate.deviceWillSleep(): nil;
fun playdate.downButtonDown(): nil;
fun playdate.downButtonUp(): nil;
fun playdate.drawFPS(x: integer, y: integer): nil;
fun playdate.epochFromGMTTime(time: _DateTime): (seconds: integer, milliseconds: integer);
fun playdate.epochFromTime(time: _DateTime): (seconds: integer, milliseconds: integer);
fun playdate.gameWillPause(): nil;
fun playdate.gameWillResume(): nil;
fun playdate.gameWillTerminate(): nil;
fun playdate.getBatteryPercentage(): integer;
fun playdate.getBatteryVoltage(): number;
fun playdate.getButtonState(): (current: integer, pressed: integer, released: integer);
fun playdate.getCrankChange(): number;
fun playdate.getCrankPosition(): number;
fun playdate.getCrankTicks(ticksPerRevolution: number): number;
fun playdate.getCurrentTimeMilliseconds(): integer;
fun playdate.getElapsedTime(): number;
fun playdate.getFPS(): number;
fun playdate.getFlipped(): boolean;
fun playdate.getGMTTime(): _DateTime;
fun playdate.getPowerStatus(): _PowerStatus;
fun playdate.getReduceFlashing(): boolean;
fun playdate.getSecondsSinceEpoch(): (seconds: integer, milliseconds: integer);
fun playdate.getStats(): table;
fun playdate.getSystemLanguage(): integer;
fun playdate.getSystemMenu(): _Menu;
fun playdate.getTime(): _DateTime;
fun playdate.isCrankDocked(): boolean;
fun playdate.keyPressed(key: string): nil;
fun playdate.keyReleased(key: string): nil;
fun playdate.leftButtonDown(): nil;
fun playdate.leftButtonUp(): nil;
fun playdate.readAccelerometer(): (x: number, y: number, z: number);
fun playdate.resetElapsedTime(): nil;
fun playdate.rightButtonDown(): nil;
fun playdate.rightButtonUp(): nil;
fun playdate.setAutoLockDisabled(disable: boolean): nil;
fun playdate.setCollectsGarbage(flag: boolean): nil;
fun playdate.setCrankSoundsDisabled(disable: boolean): nil;
fun playdate.setDebugDrawColor(r: number, g: number, b: number, a: number): nil;
fun playdate.setGCScaling(min: number, max: number): nil;
fun playdate.setMenuImage(image: _Image, xOffset?: integer): nil;
fun playdate.setMinimumGCTime(ms: integer): nil;
fun playdate.setNewlinePrinted(flag: boolean): nil;
fun playdate.setStatsInterval(seconds: number): nil;
fun playdate.shouldDisplay24HourTime(): boolean;
fun playdate.start(): nil;
fun playdate.startAccelerometer(): nil;
fun playdate.stop(): nil;
fun playdate.stopAccelerometer(): nil;
fun playdate.timeFromEpoch(seconds: integer, milliseconds: integer): _DateTime;
fun playdate.upButtonDown(): nil;
fun playdate.upButtonUp(): nil;
fun playdate.update(): nil;
fun playdate.wait(milliseconds: integer): nil;

global playdate.datastore;
fun playdate.datastore.delete(filename?: string): boolean;
fun playdate.datastore.read(filename?: string): table?;
fun playdate.datastore.readImage(path: string): _Image?;
fun playdate.datastore.write(table: table, filename?: string, pretty: boolean): nil;
fun playdate.datastore.writeImage(image: _Image, path: string): nil;

global playdate.display;
fun playdate.display.flush(): nil;
fun playdate.display.getHeight(): integer;
fun playdate.display.getInverted(): boolean;
fun playdate.display.getMosaic(): (x: integer, y: integer);
fun playdate.display.getOffset(): (x: integer, y: integer);
fun playdate.display.getRect(): _Rect;
fun playdate.display.getRefreshRate(): integer;
fun playdate.display.getScale(): integer;
fun playdate.display.getSize(): (width: integer, height: integer);
fun playdate.display.getWidth(): integer;
fun playdate.display.loadImage(path: string): nil;
fun playdate.display.setFlipped(x: integer, y: integer): nil;
fun playdate.display.setInverted(flag: boolean): nil;
fun playdate.display.setMosaic(x: integer, y: integer): nil;
fun playdate.display.setOffset(x: integer, y: integer): nil;
fun playdate.display.setRefreshRate(rate: number): nil;
fun playdate.display.setScale(scale: integer): nil;

global playdate.easingFunctions;
fun playdate.easingFunctions.inBack(t: number, b: number, c: number, d: number, s?: number): number;
fun playdate.easingFunctions.inBounce(t: number, b: number, c: number, d: number): number;
fun playdate.easingFunctions.inCirc(t: number, b: number, c: number, d: number): number;
fun playdate.easingFunctions.inCubic(t: number, b: number, c: number, d: number): number;
fun playdate.easingFunctions.inElastic(t: number, b: number, c: number, d: number, a?: number, p?: number): number;
fun playdate.easingFunctions.inExpo(t: number, b: number, c: number, d: number): number;
fun playdate.easingFunctions.inOutBack(t: number, b: number, c: number, d: number, s?: number): number;
fun playdate.easingFunctions.inOutBounce(t: number, b: number, c: number, d: number): number;
fun playdate.easingFunctions.inOutCirc(t: number, b: number, c: number, d: number): number;
fun playdate.easingFunctions.inOutCubic(t: number, b: number, c: number, d: number): number;
fun playdate.easingFunctions.inOutElastic(t: number, b: number, c: number, d: number, a?: number, p?: number): number;
fun playdate.easingFunctions.inOutExpo(t: number, b: number, c: number, d: number): number;
fun playdate.easingFunctions.inOutQuad(t: number, b: number, c: number, d: number): number;
fun playdate.easingFunctions.inOutQuart(t: number, b: number, c: number, d: number): number;
fun playdate.easingFunctions.inOutQuint(t: number, b: number, c: number, d: number): number;
fun playdate.easingFunctions.inOutSine(t: number, b: number, c: number, d: number): number;
fun playdate.easingFunctions.inQuad(t: number, b: number, c: number, d: number): number;
fun playdate.easingFunctions.inQuart(t: number, b: number, c: number, d: number): number;
fun playdate.easingFunctions.inQuint(t: number, b: number, c: number, d: number): number;
fun playdate.easingFunctions.inSine(t: number, b: number, c: number, d: number): number;
fun playdate.easingFunctions.linear(t: number, b: number, c: number, d: number): number;
fun playdate.easingFunctions.outBack(t: number, b: number, c: number, d: number, s?: number): number;
fun playdate.easingFunctions.outBounce(t: number, b: number, c: number, d: number): number;
fun playdate.easingFunctions.outCirc(t: number, b: number, c: number, d: number): number;
fun playdate.easingFunctions.outCubic(t: number, b: number, c: number, d: number): number;
fun playdate.easingFunctions.outElastic(t: number, b: number, c: number, d: number, a?: number, p?: number): number;
fun playdate.easingFunctions.outExpo(t: number, b: number, c: number, d: number): number;
fun playdate.easingFunctions.outInBack(t: number, b: number, c: number, d: number, s?: number): number;
fun playdate.easingFunctions.outInBounce(t: number, b: number, c: number, d: number): number;
fun playdate.easingFunctions.outInCirc(t: number, b: number, c: number, d: number): number;
fun playdate.easingFunctions.outInCubic(t: number, b: number, c: number, d: number): number;
fun playdate.easingFunctions.outInElastic(t: number, b: number, c: number, d: number, a?: number, p?: number): number;
fun playdate.easingFunctions.outInExpo(t: number, b: number, c: number, d: number): number;
fun playdate.easingFunctions.outInQuad(t: number, b: number, c: number, d: number): number;
fun playdate.easingFunctions.outInQuart(t: number, b: number, c: number, d: number): number;
fun playdate.easingFunctions.outInQuint(t: number, b: number, c: number, d: number): number;
fun playdate.easingFunctions.outInSine(t: number, b: number, c: number, d: number): number;
fun playdate.easingFunctions.outQuad(t: number, b: number, c: number, d: number): number;
fun playdate.easingFunctions.outQuart(t: number, b: number, c: number, d: number): number;
fun playdate.easingFunctions.outQuint(t: number, b: number, c: number, d: number): number;
fun playdate.easingFunctions.outSine(t: number, b: number, c: number, d: number): number;

global playdate.file = {
    kFileRead: integer = 3,
    kFileAppend: integer = 8,
    kFileWrite: integer = 4,
};
fun playdate.file.delete(path: string, recursive?: boolean): boolean;
fun playdate.file.exists(path: string): boolean;
fun playdate.file.getSize(path: string): integer;
fun playdate.file.getType(path: string): string;
fun playdate.file.isdir(path: string): boolean;
fun playdate.file.listFiles(path: string, showhidden?: boolean): string[];
fun playdate.file.load(path: string, env?: table): function;
fun playdate.file.mkdir(path: string): nil;
fun playdate.file.modtime(path: string): _ModTime;
fun playdate.file.open(path: string, mode?: integer): (file: _File?, error: string?);
fun playdate.file.rename(path: string, newPath: string): boolean;
fun playdate.file.run(path: string, env?: table): nil;

global playdate.file.file;
local _File: playdate.file.file;
fun playdate.file.file:close(): nil;
fun playdate.file.file:flush(): nil;
fun playdate.file.file:read(numberOfBytes: integer): (numberOfBytes: integer, error: string?);
fun playdate.file.file:readline(): string;
fun playdate.file.file:seek(offset: integer): nil;
fun playdate.file.file:tell(): integer;
fun playdate.file.file:write(str: string): (bytes_written: integer, error: string?);

global playdate.frameTimer;
fun playdate.frameTimer.allTimers(): _FrameTimer[];
fun playdate.frameTimer.new(duration: integer, callback: function, ...: any): _FrameTimer;
fun playdate.frameTimer.new(duration: integer, startValue?: number, endValue?: number, easingFunction?: function): _FrameTimer;
fun playdate.frameTimer.performAfterDelay(delay: integer, callback: function, ...: any): nil;
fun playdate.frameTimer.updateTimers(): nil;
local _FrameTimer: playdate.frameTimer = {
    delay: integer,
    discardOnCompletion: boolean,
    duration: integer,
    frame: integer,
    repeats: boolean,
    reverses: boolean,
    timerEndedArgs: any[],
};
fun _FrameTimer:timerEndedCallback(...: any): nil;
fun _FrameTimer:updateCallback(...: any): nil;

fun playdate.frameTimer:pause(): nil;
fun playdate.frameTimer:remove(): nil;
fun playdate.frameTimer:reset(): nil;
fun playdate.frameTimer:start(): nil;

global playdate.geometry = {
    kUnflipped: integer = 0,
    kFlippedX: integer = 1,
    kFlippedY: integer = 2,
    kFlippedXY: integer = 3,
};
fun playdate.geometry.distanceToPoint(x1: integer, y1: integer, x2: integer, y2: integer): number;
fun playdate.geometry.squaredDistanceToPoint(x1: integer, y1: integer, x2: integer, y2: integer): number;

global playdate.geometry.affineTransform;
fun playdate.geometry.affineTransform.new(): _AffineTransform;
fun playdate.geometry.affineTransform.new(m11: number, m12: number, m21: number, m22: number, tx: number, ty: number): _AffineTransform;
local _AffineTransform: playdate.geometry.affineTransform;
fun playdate.geometry.affineTransform:__mul(p: _Point): _Point;
fun playdate.geometry.affineTransform:__mul(t: _AffineTransform): _AffineTransform;
fun playdate.geometry.affineTransform:__mul(v: _Vector2D): _Vector2D;
fun playdate.geometry.affineTransform:concat(af: _AffineTransform): nil;
fun playdate.geometry.affineTransform:copy(): _AffineTransform;
fun playdate.geometry.affineTransform:invert(): nil;
fun playdate.geometry.affineTransform:reset(): nil;
fun playdate.geometry.affineTransform:rotate(angle: number, point?: _Point): nil;
fun playdate.geometry.affineTransform:rotate(angle: number, x?: integer, y?: integer): nil;
fun playdate.geometry.affineTransform:rotatedBy(angle: number, point?: _Point): _AffineTransform;
fun playdate.geometry.affineTransform:rotatedBy(angle: number, x?: integer, y?: integer): _AffineTransform;
fun playdate.geometry.affineTransform:scale(sx: number, sy?: number): nil;
fun playdate.geometry.affineTransform:scaledBy(sx: number, sy?: number): _AffineTransform;
fun playdate.geometry.affineTransform:skew(sx: number, sy: number): nil;
fun playdate.geometry.affineTransform:skewedBy(sx: number, sy: number): _AffineTransform;
fun playdate.geometry.affineTransform:transformAABB(r: _Rect): nil;
fun playdate.geometry.affineTransform:transformLineSegment(ls: _LineSegment): nil;
fun playdate.geometry.affineTransform:transformPoint(p: _Point): nil;
fun playdate.geometry.affineTransform:transformPolygon(p: _Polygon): nil;
fun playdate.geometry.affineTransform:transformXY(x: integer, y: integer): (x: number, y: number);
fun playdate.geometry.affineTransform:transformedAABB(r: _Rect): _Rect;
fun playdate.geometry.affineTransform:transformedLineSegment(ls: _LineSegment): _LineSegment;
fun playdate.geometry.affineTransform:transformedPoint(p: _Point): _Point;
fun playdate.geometry.affineTransform:transformedPolygon(p: _Polygon): _Polygon;
fun playdate.geometry.affineTransform:translate(dx: integer, dy: integer): nil;
fun playdate.geometry.affineTransform:translatedBy(dx: integer, dy: integer): _AffineTransform;

global playdate.geometry.arc;
fun playdate.geometry.arc.new(x: integer, y: integer, radius: number, startAngle: number, endAngle: number, direction?: boolean): _Arc;
local _Arc: playdate.geometry.arc = {
    x: integer,
    y: integer,
    radius: integer,
    startAngle: number,
    endAngle: number,
    direction: boolean,
};
fun playdate.geometry.arc:copy(): _Arc;
fun playdate.geometry.arc:isClockwise(): boolean;
fun playdate.geometry.arc:length(): number;
fun playdate.geometry.arc:pointOnArc(distance: integer, extend: boolean): _Point;
fun playdate.geometry.arc:setIsClockwise(flag: boolean): nil;

global playdate.geometry.lineSegment;
fun playdate.geometry.lineSegment.fast_intersection(x1: integer, y1: integer, x2: integer, y2: integer, x3: integer, y3: integer, x4: integer, y4: integer): (intersects: boolean, x: number?, y: number?);
fun playdate.geometry.lineSegment.new(x1: integer, y1: integer, x2: integer, y2: integer): _LineSegment;
local _LineSegment: playdate.geometry.lineSegment = {
    x1: integer,
    y1: integer,
    x2: integer,
    y2: integer,
};
fun playdate.geometry.lineSegment:closestPointOnLineToPoint(p: _Point): _Point;
fun playdate.geometry.lineSegment:copy(): _LineSegment;
fun playdate.geometry.lineSegment:intersectsLineSegment(ls: _LineSegment): (intersects: boolean, intersection: _Point?);
fun playdate.geometry.lineSegment:intersectsPolygon(poly: _Polygon): (intersects: boolean, intersectionPoints: _Point[]?);
fun playdate.geometry.lineSegment:intersectsRect(rect: _Rect): (intersects: boolean, intersectionPoints: _Point[]?);
fun playdate.geometry.lineSegment:length(): number;
fun playdate.geometry.lineSegment:midPoint(): _Point;
fun playdate.geometry.lineSegment:offset(dx: integer, dy: integer): nil;
fun playdate.geometry.lineSegment:offsetBy(dx: integer, dy: integer): _LineSegment;
fun playdate.geometry.lineSegment:pointOnLine(distance: integer, extend?: boolean): _Point;
fun playdate.geometry.lineSegment:segmentVector(): _Vector2D;
fun playdate.geometry.lineSegment:unpack(): (x1: number, y1: number, x2: number, y2: number);

global playdate.geometry.point;
fun playdate.geometry.point.new(x: integer, y: integer): _Point;
local _Point: playdate.geometry.point = {
    x: number,
    y: number,
};
fun playdate.geometry.point:__add(v: _Vector2D): _Point;
fun playdate.geometry.point:__concat(p2: _Point): _LineSegment;
fun playdate.geometry.point:__mul(t: _AffineTransform): _Point;
fun playdate.geometry.point:__sub(p2: _Point): _Vector2D;
fun playdate.geometry.point:copy(): _Point;
fun playdate.geometry.point:distanceToPoint(p: _Point): number;
fun playdate.geometry.point:offset(dx: integer, dy: integer): nil;
fun playdate.geometry.point:offsetBy(dx: integer, dy: integer): _Point;
fun playdate.geometry.point:squaredDistanceToPoint(p: _Point): number;
fun playdate.geometry.point:unpack(): (x: number, y: number);

global playdate.geometry.polygon;
fun playdate.geometry.polygon.new(numberOfVertices: integer): _Polygon;
fun playdate.geometry.polygon.new(p1: _Point, p2: _Point, ...: integer): _Polygon;
fun playdate.geometry.polygon.new(x1: integer, y1: integer, x2: integer, y2: integer, ...: integer): _Polygon;
local _Polygon: playdate.geometry.polygon;
fun playdate.geometry.polygon:__mul(t: _AffineTransform): _Polygon;
fun playdate.geometry.polygon:close(): nil;
fun playdate.geometry.polygon:containsPoint(p: _Point, fillRule?: integer): boolean;
fun playdate.geometry.polygon:containsPoint(x: integer, y: integer, fillRule?: integer): boolean;
fun playdate.geometry.polygon:copy(): _Polygon;
fun playdate.geometry.polygon:count(): integer;
fun playdate.geometry.polygon:getBounds(): (x: number, y: number, width: number, height: number);
fun playdate.geometry.polygon:getBoundsRect(): _Rect;
fun playdate.geometry.polygon:getPointAt(n: integer): _Point;
fun playdate.geometry.polygon:intersects(p: _Point): boolean;
fun playdate.geometry.polygon:isClosed(): boolean;
fun playdate.geometry.polygon:length(): number;
fun playdate.geometry.polygon:pointOnPolygon(distance: integer, extend?: boolean): _Point;
fun playdate.geometry.polygon:setPointAt(n: integer, x: integer, y: integer): nil;
fun playdate.geometry.polygon:translate(dx: integer, dy: integer): nil;

global playdate.geometry.rect;
fun playdate.geometry.rect.fast_intersection(x1: integer, y1: integer, w1: integer, h1: integer, x2: integer, y2: integer, w2: integer, h2: integer): (x: number, y: number, width: number, height: number);
fun playdate.geometry.rect.fast_union(x1: integer, y1: integer, w1: integer, h1: integer, x2: integer, y2: integer, w2: integer, h2: integer): (x: number, y: number, width: number, height: number);
fun playdate.geometry.rect.new(x: integer, y: integer, width: integer, height: integer): _Rect;
local _Rect: playdate.geometry.rect = {
    x: number,
    y: number,
    width: number,
    height: number,
    top: number,
    bottom: number,
    left: number,
    right: number,
    size: _Size,
};
fun playdate.geometry.rect:centerPoint(): _Point;
fun playdate.geometry.rect:containsPoint(p: _Point): boolean;
fun playdate.geometry.rect:containsPoint(x: integer, y: integer): boolean;
fun playdate.geometry.rect:containsRect(r2: _Rect): boolean;
fun playdate.geometry.rect:containsRect(x: integer, y: integer, width: integer, height: integer): boolean;
fun playdate.geometry.rect:copy(): _Rect;
fun playdate.geometry.rect:flipRelativeToRect(r2: _Rect, flip: (integer|string)): nil;
fun playdate.geometry.rect:inset(dx: integer, dy: integer): nil;
fun playdate.geometry.rect:insetBy(dx: integer, dy: integer): _Rect;
fun playdate.geometry.rect:intersection(r2: _Rect): _Rect;
fun playdate.geometry.rect:intersects(r2: _Rect): boolean;
fun playdate.geometry.rect:isEmpty(): boolean;
fun playdate.geometry.rect:isEqual(r2: _Rect): boolean;
fun playdate.geometry.rect:offset(dx: integer, dy: integer): nil;
fun playdate.geometry.rect:offsetBy(dx: integer, dy: integer): _Rect;
fun playdate.geometry.rect:toPolygon(): _Polygon;
fun playdate.geometry.rect:union(r2: _Rect): _Rect;
fun playdate.geometry.rect:unpack(): (x: number, y: number, width: number, height: number);

global playdate.geometry.size;
fun playdate.geometry.size.new(width: integer, height: integer): _Size;
local _Size: playdate.geometry.size = {
    width: number,
    height: number,
};
fun playdate.geometry.size:copy(): _Size;
fun playdate.geometry.size:unpack(): (width: number, height: number);

global playdate.geometry.vector2D;
fun playdate.geometry.vector2D.new(x: integer, y: integer): _Vector2D;
fun playdate.geometry.vector2D.newPolar(length: number, angle: number): _Vector2D;
local _Vector2D: playdate.geometry.vector2D = {
    dx: number,
    dy: number,
};
fun playdate.geometry.vector2D:__add(v2: _Vector2D): _Vector2D;
fun playdate.geometry.vector2D:__div(s: number): _Vector2D;
fun playdate.geometry.vector2D:__mul(s: number): _Vector2D;
fun playdate.geometry.vector2D:__mul(t: _AffineTransform): _Vector2D;
fun playdate.geometry.vector2D:__mul(v2: _Vector2D): _Vector2D;
fun playdate.geometry.vector2D:__sub(v2: _Vector2D): _Vector2D;
fun playdate.geometry.vector2D:__unm(): _Vector2D;
fun playdate.geometry.vector2D:addVector(v: _Vector2D): nil;
fun playdate.geometry.vector2D:angleBetween(v: _Vector2D): number;
fun playdate.geometry.vector2D:copy(): _Vector2D;
fun playdate.geometry.vector2D:dotProduct(v: _Vector2D): number;
fun playdate.geometry.vector2D:leftNormal(): _Vector2D;
fun playdate.geometry.vector2D:magnitude(): number;
fun playdate.geometry.vector2D:magnitudeSquared(): number;
fun playdate.geometry.vector2D:normalize(): nil;
fun playdate.geometry.vector2D:normalized(): _Vector2D;
fun playdate.geometry.vector2D:projectAlong(v: _Vector2D): nil;
fun playdate.geometry.vector2D:projectedAlong(v: _Vector2D): _Vector2D;
fun playdate.geometry.vector2D:rightNormal(): _Vector2D;
fun playdate.geometry.vector2D:scale(s: number): nil;
fun playdate.geometry.vector2D:scaledBy(s: number): _Vector2D;
fun playdate.geometry.vector2D:unpack(): (x: number, y: number);

global playdate.graphics = {
    kColorBlack: integer = 0,
    kColorWhite: integer = 1,
    kColorClear: integer = 2,
    kColorXOR: integer = 3,
    kDrawModeCopy: integer = 0,
    kDrawModeWhiteTransparent: integer = 1,
    kDrawModeBlackTransparent: integer = 2,
    kDrawModeFillWhite: integer = 3,
    kDrawModeFillBlack: integer = 4,
    kDrawModeXOR: integer = 5,
    kDrawModeNXOR: integer = 6,
    kDrawModeInverted: integer = 7,
    kImageUnflipped: integer = 0,
    kImageFlippedX: integer = 1,
    kImageFlippedY: integer = 2,
    kImageFlippedXY: integer = 3,
    kPolygonFillNonZero: integer = 0,
    kPolygonFillEvenOdd: integer = 1,
    kStrokeCentered: integer = 0,
    kStrokeInside: integer = 1,
    kStrokeOutside: integer = 2
};
fun playdate.graphics.checkAlphaCollision(image1: _Image, x1: integer, y1: integer, flip1: integer, image2: _Image, x2: integer, y2: integer, flip2: integer): boolean;
fun playdate.graphics.clear(color?: integer): nil;
fun playdate.graphics.clearClipRect(): nil;
fun playdate.graphics.clearStencil(): nil;
fun playdate.graphics.clearStencilImage(): nil;
fun playdate.graphics.drawArc(arc: _Arc): nil;
fun playdate.graphics.drawArc(x: integer, y: integer, radius: number, startAngle: number, endAngle: number): nil;
fun playdate.graphics.drawCircleAtPoint(p: _Point, radius: number): nil;
fun playdate.graphics.drawCircleAtPoint(x: integer, y: integer, radius: number): nil;
fun playdate.graphics.drawCircleInRect(r: _Rect): nil;
fun playdate.graphics.drawCircleInRect(x: integer, y: integer, width: integer, height: integer): nil;
fun playdate.graphics.drawEllipseInRect(rect: _Rect, startAngle?: number, endAngle?: number): nil;
fun playdate.graphics.drawEllipseInRect(x: integer, y: integer, width: integer, height: integer, startAngle?: number, endAngle?: number): nil;
fun playdate.graphics.drawLine(x1: integer, y1: integer, x2: integer, y2: integer): nil;
fun playdate.graphics.drawLocalizedText(key: string, x: integer, y: integer, language?: (integer|string), leadingAdjustment?: integer): nil;
fun playdate.graphics.drawLocalizedTextAligned(text: string, x: integer, y: integer, alignment: integer, language?: (integer|string), leadingAdjustment?: integer): nil;
fun playdate.graphics.drawLocalizedTextInRect(text: string, rect: _Rect, leadingAdjustment?: integer, truncationString?: string, alignment?: integer, font?: _Font, language?: (integer|string)): nil;
fun playdate.graphics.drawLocalizedTextInRect(text: string, x: integer, y: integer, width: integer, height: integer, leadingAdjustment?: integer, truncationString?: string, alignment?: integer, font?: playdate.graphics.font, language?: (integer|string)): nil;
fun playdate.graphics.drawPixel(x: integer, y: integer): nil;
fun playdate.graphics.drawPolygon(p: _Polygon): nil;
fun playdate.graphics.drawPolygon(x1: integer, y1: integer, x2: integer, y2: integer, ...?: integer): nil;
fun playdate.graphics.drawRect(r: _Rect): nil;
fun playdate.graphics.drawRect(x: integer, y: integer, w: integer, h: integer): nil;
fun playdate.graphics.drawRoundRect(r: _Rect, radius: number): nil;
fun playdate.graphics.drawRoundRect(x: integer, y: integer, w: integer, h: integer, radius: number): nil;
fun playdate.graphics.drawSineWave(startX: integer, startY: integer, endX: integer, endY: integer, startAmplitude: integer, endAmplitude: integer, period: integer, phaseShift?: integer): nil;
fun playdate.graphics.drawText(text: string, x: integer, y: integer, fontFamily?: table<integer, _Font>, leadingAdjustment?: integer): nil;
fun playdate.graphics.drawTextAligned(text: string, x: integer, y: integer, alignment: integer, leadingAdjustment?: integer): nil;
fun playdate.graphics.drawTextInRect(text: string, rect: _Rect, leadingAdjustment?: integer, truncationString?: string, alignment?: integer, font?: _Font): nil;
fun playdate.graphics.drawTextInRect(text: string, x: integer, y: integer, width: integer, height: integer, leadingAdjustment?: integer, truncationString?: string, alignment?: integer, font?: playdate.graphics.font): nil;
fun playdate.graphics.drawTriangle(x1: integer, y1: integer, x2: integer, y2: integer, x3: integer, y3: integer): nil;
fun playdate.graphics.fillCircleAtPoint(p: _Point, radius: number): nil;
fun playdate.graphics.fillCircleAtPoint(x: integer, y: integer, radius: number): nil;
fun playdate.graphics.fillCircleInRect(r: _Rect): nil;
fun playdate.graphics.fillCircleInRect(x: integer, y: integer, width: integer, height: integer): nil;
fun playdate.graphics.fillEllipseInRect(rect: _Rect, startAngle?: number, endAngle?: number): nil;
fun playdate.graphics.fillEllipseInRect(x: integer, y: integer, width: integer, height: integer, startAngle?: number, endAngle?: number): nil;
fun playdate.graphics.fillPolygon(p: _Polygon): nil;
fun playdate.graphics.fillPolygon(x1: integer, y1: integer, x2: integer, y2: integer, ...?: integer): nil;
fun playdate.graphics.fillRect(r: _Rect): nil;
fun playdate.graphics.fillRect(x: integer, y: integer, width: integer, height: integer): nil;
fun playdate.graphics.fillRoundRect(r: _Rect, radius: number): nil;
fun playdate.graphics.fillRoundRect(x: integer, y: integer, w: integer, h: integer, radius: number): nil;
fun playdate.graphics.fillTriangle(x1: integer, y1: integer, x2: integer, y2: integer, x3: integer, y3: integer): nil;
fun playdate.graphics.generateQRCode(stringToEncode: string, desiredEdgeDimension: integer, callback: function): nil;
fun playdate.graphics.getBackgroundColor(): integer;
fun playdate.graphics.getClipRect(): (x: integer, y: integer, width: integer, height: integer);
fun playdate.graphics.getColor(): integer;
fun playdate.graphics.getDisplayImage(): _Image;
fun playdate.graphics.getDrawOffset(): (x: integer, y: integer);
fun playdate.graphics.getFont(variant?: (integer|string)): _Font;
fun playdate.graphics.getFontTracking(): integer;
fun playdate.graphics.getImageDrawMode(): integer;
fun playdate.graphics.getLineWidth(): integer;
fun playdate.graphics.getLocalizedText(key: string, language?: (integer|string)): string;
fun playdate.graphics.getScreenClipRect(): (x: integer, y: integer, width: integer, height: integer);
fun playdate.graphics.getStrokeLocation(): integer;
fun playdate.graphics.getSystemFont(variant?: (integer|string)): _Font;
fun playdate.graphics.getTextSize(str: string, fontFamily?: table<integer, _Font>, leadingAdjustment?: integer): (width: integer, height: integer);
fun playdate.graphics.getTextSizeForMaxWidth(text: string, maxWidth: integer, leadingAdjustment?: integer, font?: _Font): (width: integer, height: integer);
fun playdate.graphics.getWorkingImage(): _Image;
fun playdate.graphics.lockFocus(image: _Image): nil;
fun playdate.graphics.perlin(x: integer, y: integer, z: integer, _repeat: number, octaves?: integer, persistence?: number): number;
fun playdate.graphics.perlinArray(count: integer, x: integer, dx: integer, y?: integer, dy?: integer, z?: integer, dz?: integer, _repeat: number, octaves?: integer, persistence?: number): number[];
fun playdate.graphics.popContext(): nil;
fun playdate.graphics.pushContext(image?: _Image): nil;
fun playdate.graphics.setBackgroundColor(color: integer): nil;
fun playdate.graphics.setClipRect(rect: _Rect): nil;
fun playdate.graphics.setClipRect(x: integer, y: integer, width: integer, height: integer): nil;
fun playdate.graphics.setColor(color: integer): nil;
fun playdate.graphics.setDitherPattern(alpha: number, ditherType?: integer): nil;
fun playdate.graphics.setDrawOffset(x: integer, y: integer): nil;
fun playdate.graphics.setFont(font: _Font, variant?: (integer|string)): nil;
fun playdate.graphics.setFontFamily(fontFamily: table<integer, _Font>): nil;
fun playdate.graphics.setFontTracking(pixels: integer): nil;
fun playdate.graphics.setImageDrawMode(mode: integer): nil;
fun playdate.graphics.setLineCapStyle(style: integer): nil;
fun playdate.graphics.setLineWidth(width: integer): nil;
fun playdate.graphics.setPattern(pattern: integer[]): nil;
fun playdate.graphics.setPolygonFillRule(rule: integer): nil;
fun playdate.graphics.setScreenClipRect(rect: _Rect): nil;
fun playdate.graphics.setScreenClipRect(x: integer, y: integer, width: integer, height: integer): nil;
fun playdate.graphics.setStencilImage(image: _Image, tile?: boolean): nil;
fun playdate.graphics.setStencilPattern(level: any, ditherType?: integer): nil;
fun playdate.graphics.setStencilPattern(pattern: integer[]): nil;
fun playdate.graphics.setStencilPattern(row1: integer, row2: integer, row3: integer, row4: integer, row5: integer, row6: integer, row7: integer, row8: integer): nil;
fun playdate.graphics.setStrokeLocation(location: integer): nil;
fun playdate.graphics.unlockFocus(): nil;

global playdate.graphics.animation;

global playdate.graphics.animation.loop;
fun playdate.graphics.animation.loop.new(delay?: number, imageTable?: _ImageTable, shouldLoop?: boolean): _AnimationLoop;
local _AnimationLoop: playdate.graphics.animation.loop = {
    delay: number,
    startFrame: integer,
    endFrame: integer,
    frame: integer,
    step: integer,
    shouldLoop: boolean,
    paused: boolean,
};
fun playdate.graphics.animation.loop:draw(x: integer, y: integer, flip?: (integer|string)): nil;
fun playdate.graphics.animation.loop:image(): _Image;
fun playdate.graphics.animation.loop:isValid(): boolean;
fun playdate.graphics.animation.loop:setImageTable(imageTable: _ImageTable): nil;

global playdate.graphics.animation.blinker;
fun playdate.graphics.animation.blinker.new(onDuration?: integer, offDuration?: integer, loop?: boolean, cycles?: integer, default?: boolean): _Blinker;
fun playdate.graphics.animation.blinker.stopAll(): nil;
fun playdate.graphics.animation.blinker.updateAll(): nil;
local _Blinker: playdate.graphics.animation.blinker = {
    onDuration: integer,
    offDuration: integer,
    loop: boolean,
    cycles: integer,
    default: boolean,
    counter: integer,
    on: boolean,
    running: boolean,
};
fun playdate.graphics.animation.blinker:remove(): nil;
fun playdate.graphics.animation.blinker:start(onDuration?: integer, offDuration?: integer, loop?: boolean, cycles?: integer, default?: boolean): nil;
fun playdate.graphics.animation.blinker:startLoop(): nil;
fun playdate.graphics.animation.blinker:stop(): nil;
fun playdate.graphics.animation.blinker:update(): nil;

global playdate.graphics.animator;
fun playdate.graphics.animator.new(duration: integer, arc: _Arc, easingFunction?: function, startTimeOffset?: integer): _Animator;
fun playdate.graphics.animator.new(duration: integer, lineSegment: _LineSegment, easingFunction?: function, startTimeOffset?: integer): _Animator;
fun playdate.graphics.animator.new(duration: integer, polygon: _Polygon, easingFunction?: function, startTimeOffset?: integer): _Animator;
fun playdate.graphics.animator.new(duration: integer, startValue: (number|_Point), endValue: (number|_Point), easingFunction?: function, startTimeOffset?: integer): _Animator;
fun playdate.graphics.animator.new(durations: integer, parts: number[], easingFunctions: function[], startTimeOffset?: integer): _Animator;
local _Animator: playdate.graphics.animator = {
    repeatCount: integer,
    reverses: integer,
    easingAmplitude: number,
    easingPeriod: number,
    s?: number,
    a?: number,
    p?: number,
};
fun playdate.graphics.animator:currentValue(): (number|_Point);
fun playdate.graphics.animator:ended(): boolean;
fun playdate.graphics.animator:progress(): number;
fun playdate.graphics.animator:reset(duration?: integer): nil;
fun playdate.graphics.animator:valueAtTime(time: number): (number|_Point);

global playdate.graphics.font = {
    kLanguageEnglish: integer = 0,
    kLanguageJapanese: integer = 1,
    kVariantNormal: integer = 0,
    kVariantBold: integer = 1,
    kVariantItalic: integer = 2,
};
fun playdate.graphics.font.new(path: string): _Font;
fun playdate.graphics.font.newFamily(fontPaths: table<integer, string>): _Font[];
local _Font: playdate.graphics.font;
fun playdate.graphics.font:drawText(text: string, x: integer, y: integer, leadingAdjustment?: integer): nil;
fun playdate.graphics.font:drawTextAligned(text: string, x: integer, y: integer, alignment: integer, leadingAdjustment?: integer): nil;
fun playdate.graphics.font:getGlyph(character: string): _Image;
fun playdate.graphics.font:getHeight(): integer;
fun playdate.graphics.font:getLeading(): integer;
fun playdate.graphics.font:getTextWidth(text: string): integer;
fun playdate.graphics.font:getTracking(): integer;
fun playdate.graphics.font:setLeading(pixels: integer): nil;
fun playdate.graphics.font:setTracking(pixels: integer): nil;

global playdate.graphics.image = {
    kDitherTypeNone: integer = 0,
    kDitherTypeDiagonalLine: integer = 1,
    kDitherTypeHorizontalLine: integer = 3,
    kDitherTypeVerticalLine: integer = 2,
    kDitherTypeScreen: integer = 4,
    kDitherTypeBayer2x2: integer = 5,
    kDitherTypeBayer4x4: integer = 6,
    kDitherTypeBayer8x8: integer = 7,
    kDitherTypeFloydSteinberg: integer = 8,
    kDitherTypeBurkes: integer = 9,
    kDitherTypeAtkinson: integer = 10,
};
local _Image: playdate.graphics.image = {
    x: integer,
    y: integer,
    width: integer,
    height: integer,
};
fun playdate.graphics.image.new(path: string): (image: _Image?, error: string?);
fun playdate.graphics.image.new(width: integer, height: integer, bgcolor?: integer): _Image;
fun playdate.graphics.image:addMask(opaque?: boolean): nil;
fun playdate.graphics.image:blendWithImage(image: _Image, alpha: number, ditherType: integer): _Image;
fun playdate.graphics.image:blurredImage(radius: number, numPasses: integer, ditherType: integer, padEdges?: boolean, xPhase?: integer, yPhase?: integer): _Image;
fun playdate.graphics.image:clear(color: integer): nil;
fun playdate.graphics.image:clearMask(opaque?: boolean): nil;
fun playdate.graphics.image:copy(): _Image;
fun playdate.graphics.image:draw(p: _Point, flip?: (integer|string), sourceRect?: _Rect): nil;
fun playdate.graphics.image:draw(x: integer, y: integer, flip?: (integer|string), sourceRect?: _Rect): nil;
fun playdate.graphics.image:drawAnchored(x: integer, y: integer, ax: number, ay: number, flip?: (integer|string)): nil;
fun playdate.graphics.image:drawBlurred(x: integer, y: integer, radius: number, numPasses: integer, ditherType: integer, flip?: (integer|string), xPhase?: integer, yPhase?: integer): nil;
fun playdate.graphics.image:drawCentered(x: integer, y: integer, flip?: (integer|string)): nil;
fun playdate.graphics.image:drawFaded(x: integer, y: integer, alpha: number, ditherType: integer): nil;
fun playdate.graphics.image:drawIgnoringOffset(p: _Point, flip?: (integer|string)): nil;
fun playdate.graphics.image:drawIgnoringOffset(x: integer, y: integer, flip?: (integer|string)): nil;
fun playdate.graphics.image:drawRotated(x: integer, y: integer, angle: number, scale?: integer, yscale?: integer): nil;
fun playdate.graphics.image:drawSampled(x: integer, y: integer, width: integer, height: integer, centerx: number, centery: number, dxx: number, dyx: number, dxy: number, dyy: number, dx: integer, dy: integer, z: integer, tiltAngle: number, tile: boolean): nil;
fun playdate.graphics.image:drawScaled(x: integer, y: integer, scale: integer, yscale?: integer): nil;
fun playdate.graphics.image:drawTiled(rect: _Rect, flip?: (integer|string)): nil;
fun playdate.graphics.image:drawTiled(x: integer, y: integer, width: integer, height: integer, flip?: (integer|string)): nil;
fun playdate.graphics.image:drawWithTransform(xform: _AffineTransform, x: integer, y: integer): nil;
fun playdate.graphics.image:fadedImage(alpha: number, ditherType: integer): _Image;
fun playdate.graphics.image:getMaskImage(): _Image;
fun playdate.graphics.image:getSize(): (width: integer, height: integer);
fun playdate.graphics.image:hasMask(): boolean;
fun playdate.graphics.image:invertedImage(): _Image;
fun playdate.graphics.image:load(path: string): (success: boolean, error: string?);
fun playdate.graphics.image:removeMask(): nil;
fun playdate.graphics.image:rotatedImage(angle: number, scale?: integer, yscale?: integer): _Image;
fun playdate.graphics.image:sample(x: integer, y: integer): integer;
fun playdate.graphics.image:scaledImage(scale: integer, yscale?: integer): _Image;
fun playdate.graphics.image:setInverted(flag: boolean): nil;
fun playdate.graphics.image:setMaskImage(maskImage: _Image): nil;
fun playdate.graphics.image:transformedImage(xform: _AffineTransform): _Image;
fun playdate.graphics.image:vcrPauseFilterImage(): _Image;
fun playdate.graphics.imageSizeAtPath(path: string): (width: integer, height: integer);
fun playdate.graphics.imageWithText(text: string, maxWidth: integer, maxHeight: integer, backgroundColor?: integer, leadingAdjustment?: integer, truncationString?: string, alignment?: integer, font?: playdate.graphics.font): (image: _Image, textWasTruncated: boolean);

global playdate.graphics.imagetable;
fun playdate.graphics.imagetable.new(count: integer, cellsWide?: integer, cellSize?: integer): _ImageTable;
fun playdate.graphics.imagetable.new(path: string): _ImageTable;
local _ImageTable: playdate.graphics.imagetable;
fun playdate.graphics.imagetable:__index(n: integer): nil;
fun playdate.graphics.imagetable:drawImage(n: integer, x: integer, y: integer, flip?: (integer|string)): nil;
fun playdate.graphics.imagetable:getImage(n: integer): _Image;
fun playdate.graphics.imagetable:getImage(x: integer, y: integer): _Image;
fun playdate.graphics.imagetable:getLength(): integer;
fun playdate.graphics.imagetable:getSize(): (cellsWide: integer, cellsHigh: integer);
fun playdate.graphics.imagetable:load(path: string): (success: boolean, error: string?);
fun playdate.graphics.imagetable:setImage(n: integer, image: _Image): nil;

global playdate.graphics.nineSlice;
fun playdate.graphics.nineSlice.new(imagePath: string, innerX: integer, innerY: integer, innerWidth: integer, innerHeight: integer): _NineSlice;
local _NineSlice: playdate.graphics.nineSlice = {
    innerRect: _Rect,
    minWidth: integer,
    minHeight: integer,
};
fun playdate.graphics.nineSlice:drawInRect(rect: _Rect): nil;
fun playdate.graphics.nineSlice:drawInRect(x: integer, y: integer, width: integer, height: integer): nil;
fun playdate.graphics.nineSlice:getMinSize(): (width: integer, height: integer);
fun playdate.graphics.nineSlice:getSize(): (width: integer, height: integer);

global playdate.graphics.sprite = {
    kCollisionTypeSlide: integer = 0,
    kCollisionTypeFreeze: integer = 1,
    kCollisionTypeOverlap: integer = 2,
    kCollisionTypeBounce: integer = 3,
};
fun playdate.graphics.sprite.addDirtyRect(x: integer, y: integer, width: integer, height: integer): nil;
fun playdate.graphics.sprite.addEmptyCollisionSprite(r: _Rect): nil;
fun playdate.graphics.sprite.addEmptyCollisionSprite(x: integer, y: integer, w: integer, h: integer): nil;
fun playdate.graphics.sprite.addSprite(sprite: _Sprite): nil;
fun playdate.graphics.sprite.addWallSprites(tilemap: _TileMap, emptyIDs: integer[], xOffset?: integer, yOffset?: integer): nil;
fun playdate.graphics.sprite.allOverlappingSprites(): _Sprite[][];
fun playdate.graphics.sprite.clearClipRectsInRange(startz: integer, endz: integer): nil;
fun playdate.graphics.sprite.getAllSprites(): _Sprite[];
fun playdate.graphics.sprite.getAlwaysRedraw(): boolean;
fun playdate.graphics.sprite.new(image_or_tilemap?: (_Image|_TileMap)): _Sprite;
fun playdate.graphics.sprite.performOnAllSprites(f: fun(sprite: _Sprite)): nil;
fun playdate.graphics.sprite.querySpriteInfoAlongLine(lineSegment: _LineSegment): _SpriteCollisionInfo[];
fun playdate.graphics.sprite.querySpriteInfoAlongLine(x1: integer, y1: integer, x2: integer, y2: integer): _SpriteCollisionInfo[];
fun playdate.graphics.sprite.querySpritesAlongLine(lineSegment: _LineSegment): _Sprite[];
fun playdate.graphics.sprite.querySpritesAlongLine(x1: integer, y1: integer, x2: integer, y2: integer): _Sprite[];
fun playdate.graphics.sprite.querySpritesAtPoint(p: _Point): _Sprite[];
fun playdate.graphics.sprite.querySpritesAtPoint(x: integer, y: integer): _Sprite[];
fun playdate.graphics.sprite.querySpritesInRect(rect: _Rect): _Sprite[];
fun playdate.graphics.sprite.querySpritesInRect(x: integer, y: integer, width: integer, height: integer): _Sprite[];
fun playdate.graphics.sprite.redrawBackground(): nil;
fun playdate.graphics.sprite.removeAll(): nil;
fun playdate.graphics.sprite.removeSprite(sprite: _Sprite): nil;
fun playdate.graphics.sprite.removeSprites(spriteArray: _Sprite[]): nil;
fun playdate.graphics.sprite.setAlwaysRedraw(flag: boolean): nil;
fun playdate.graphics.sprite.setBackgroundDrawingCallback(drawCallback: fun(x: integer, y: integer, width: integer, height: integer): nil): nil;
fun playdate.graphics.sprite.setClipRectsInRange(rect: _Rect, startz: integer, endz: integer): nil;
fun playdate.graphics.sprite.setClipRectsInRange(x: integer, y: integer, width: integer, height: integer, startz: integer, endz: integer): nil;
fun playdate.graphics.sprite.spriteCount(): integer;
fun playdate.graphics.sprite.spriteWithText(text: string, maxWidth: integer, maxHeight: integer, backgroundColor?: integer, leadingAdjustment?: integer, truncationString?: string, alignment?: integer, font?: _Font): _Sprite;
fun playdate.graphics.sprite.update(): nil;
local _Sprite: playdate.graphics.sprite = {
    x: integer,
    y: integer,
    width: integer,
    height: integer,
    collisionResponse?: (integer|fun(self: _Sprite, other: _Sprite): integer?),
    update?: fun():nil,
};
fun playdate.graphics.sprite:add(): nil;
fun playdate.graphics.sprite:alphaCollision(anotherSprite: _Sprite): boolean;
fun playdate.graphics.sprite:checkCollisions(point: _Point): (actualX: integer, actualY: integer, collisions: _SpriteCollisionData, length: integer);
fun playdate.graphics.sprite:checkCollisions(x: integer, y: integer): (actualX: integer, actualY: integer, collisions: _SpriteCollisionData, length: integer);
fun playdate.graphics.sprite:clearClipRect(): nil;
fun playdate.graphics.sprite:clearCollideRect(): nil;
fun playdate.graphics.sprite:clearStencil(): nil;
fun playdate.graphics.sprite:collisionResponse(other: _Sprite): integer;
fun playdate.graphics.sprite:collisionsEnabled(): boolean;
fun playdate.graphics.sprite:copy(): _Sprite;
fun playdate.graphics.sprite:draw(x: integer, y: integer, width: integer, height: integer): nil;
fun playdate.graphics.sprite:getBounds(): (x: integer, y: integer, width: integer, height: integer);
fun playdate.graphics.sprite:getBoundsRect(): _Rect;
fun playdate.graphics.sprite:getCenter(): (x: number, y: number);
fun playdate.graphics.sprite:getCenterPoint(): _Point;
fun playdate.graphics.sprite:getCollideBounds(): (x: integer, y: integer, width: integer, height: integer);
fun playdate.graphics.sprite:getCollideRect(): _Rect;
fun playdate.graphics.sprite:getCollidesWithGroupsMask(): integer;
fun playdate.graphics.sprite:getGroupMask(): integer;
fun playdate.graphics.sprite:getImage(): _Image;
fun playdate.graphics.sprite:getImageFlip(): integer;
fun playdate.graphics.sprite:getPosition(): (x: integer, y: integer);
fun playdate.graphics.sprite:getRotation(): number;
fun playdate.graphics.sprite:getScale(): (xScale: integer, yScale: integer);
fun playdate.graphics.sprite:getSize(): (width: integer, height: integer);
fun playdate.graphics.sprite:getTag(): integer;
fun playdate.graphics.sprite:getZIndex(): integer;
fun playdate.graphics.sprite:isOpaque(): boolean;
fun playdate.graphics.sprite:isVisible(): boolean;
fun playdate.graphics.sprite:markDirty(): nil;
fun playdate.graphics.sprite:moveBy(x: integer, y: integer): nil;
fun playdate.graphics.sprite:moveTo(x: integer, y: integer): nil;
fun playdate.graphics.sprite:moveWithCollisions(goalPoint: _Point): (actualX: integer, actualY: integer, collisions: _SpriteCollisionData, length: integer);
fun playdate.graphics.sprite:moveWithCollisions(goalX: integer, goalY: integer): (actualX: integer, actualY: integer, collisions: _SpriteCollisionData, length: integer);
fun playdate.graphics.sprite:overlappingSprites(): _Sprite[];
fun playdate.graphics.sprite:remove(): nil;
fun playdate.graphics.sprite:removeAnimator(): nil;
fun playdate.graphics.sprite:resetCollidesWithGroupsMask(): nil;
fun playdate.graphics.sprite:resetGroupMask(): nil;
fun playdate.graphics.sprite:setAnimator(animator: _Animator, moveWithCollisions?: boolean, removeOnCollision?: boolean): nil;
fun playdate.graphics.sprite:setBounds(rect: _Rect): nil;
fun playdate.graphics.sprite:setBounds(x: integer, y: integer, width: integer, height: integer): nil;
fun playdate.graphics.sprite:setCenter(x: integer, y: integer): nil;
fun playdate.graphics.sprite:setClipRect(rect: _Rect): nil;
fun playdate.graphics.sprite:setClipRect(x: integer, y: integer, width: integer, height: integer): nil;
fun playdate.graphics.sprite:setCollideRect(rect: _Rect): nil;
fun playdate.graphics.sprite:setCollideRect(x: integer, y: integer, width: integer, height: integer): nil;
fun playdate.graphics.sprite:setCollidesWithGroups(groups: (integer|integer[])): nil;
fun playdate.graphics.sprite:setCollidesWithGroupsMask(mask: integer): nil;
fun playdate.graphics.sprite:setCollisionsEnabled(flag: boolean): nil;
fun playdate.graphics.sprite:setGroupMask(mask: integer): nil;
fun playdate.graphics.sprite:setGroups(groups: (integer|integer[])): nil;
fun playdate.graphics.sprite:setIgnoresDrawOffset(flag: boolean): nil;
fun playdate.graphics.sprite:setImage(image: _Image, flip?: (integer|string), scale?: integer, yscale?: integer): nil;
fun playdate.graphics.sprite:setImageDrawMode(mode: integer): nil;
fun playdate.graphics.sprite:setImageFlip(flip: (integer|string), flipCollideRect?: integer): nil;
fun playdate.graphics.sprite:setOpaque(flag: boolean): nil;
fun playdate.graphics.sprite:setRedrawsOnImageChange(flag: boolean): nil;
fun playdate.graphics.sprite:setRotation(angle: number, scale?: integer, yScale?: integer): nil;
fun playdate.graphics.sprite:setScale(scale: integer, yScale?: integer): nil;
fun playdate.graphics.sprite:setSize(width: integer, height: integer): nil;
fun playdate.graphics.sprite:setStencilImage(stencil: _Image, tile?: boolean): nil;
fun playdate.graphics.sprite:setStencilPattern(level: any, ditherType?: integer): nil;
fun playdate.graphics.sprite:setStencilPattern(pattern: integer[]): nil;
fun playdate.graphics.sprite:setTag(tag: integer): nil;
fun playdate.graphics.sprite:setTilemap(tilemap: _TileMap): nil;
fun playdate.graphics.sprite:setUpdatesEnabled(flag: boolean): nil;
fun playdate.graphics.sprite:setVisible(flag: boolean): nil;
fun playdate.graphics.sprite:setZIndex(z: integer): nil;
fun playdate.graphics.sprite:update(): nil;
fun playdate.graphics.sprite:updatesEnabled(): boolean;

global playdate.graphics.tilemap;
fun playdate.graphics.tilemap.new(): _TileMap;
local _TileMap: playdate.graphics.tilemap;
fun playdate.graphics.tilemap:draw(x: integer, y: integer, sourceRect?: _Rect): nil;
fun playdate.graphics.tilemap:drawIgnoringOffset(x: integer, y: integer, sourceRect?: _Rect): nil;
fun playdate.graphics.tilemap:getCollisionRects(emptyIDs: integer[]): _Rect[];
fun playdate.graphics.tilemap:getPixelSize(): (width: integer, height: integer);
fun playdate.graphics.tilemap:getSize(): (width: integer, height: integer);
fun playdate.graphics.tilemap:getTileAtPosition(x: integer, y: integer): number?;
fun playdate.graphics.tilemap:getTileSize(): (width: integer, height: integer);
fun playdate.graphics.tilemap:getTiles(): (data: integer[], width: integer);
fun playdate.graphics.tilemap:setImageTable(table: table): nil;
fun playdate.graphics.tilemap:setSize(width: integer, height: integer): nil;
fun playdate.graphics.tilemap:setTileAtPosition(x: integer, y: integer, index: integer): nil;
fun playdate.graphics.tilemap:setTiles(data: integer[], width: integer): nil;

global playdate.graphics.video;
fun playdate.graphics.video.new(path: string): _Video;
local _Video: playdate.graphics.video;
fun playdate.graphics.video:getContext(): _Image;
fun playdate.graphics.video:getFrameCount(): integer;
fun playdate.graphics.video:getFrameRate(): number;
fun playdate.graphics.video:getSize(): (x: integer, y: integer);
fun playdate.graphics.video:renderFrame(number: integer): nil;
fun playdate.graphics.video:setContext(image: _Image): nil;
fun playdate.graphics.video:useScreenContext(): nil;

global playdate.inputHandlers;
fun playdate.inputHandlers.pop(): nil;
fun playdate.inputHandlers.push(handler: table, masksPreviousHandlers?: boolean): nil;

global playdate.keyboard = {
    kCapitalizationNormal: integer = 1,
    kCapitalizationSentences: integer = 3,
    kCapitalizationWords: integer = 2,
    text: string,
};
fun playdate.keyboard.hide(): nil;
fun playdate.keyboard.isVisible(): nil;
fun playdate.keyboard.keyboardAnimatingCallback(): nil;
fun playdate.keyboard.keyboardDidHideCallback(): nil;
fun playdate.keyboard.keyboardDidShowCallback(): nil;
fun playdate.keyboard.keyboardWillHideCallback(): nil;
fun playdate.keyboard.left(): nil;
fun playdate.keyboard.setCapitalizationBehavior(behavior: integer): nil;
fun playdate.keyboard.show(text?: string): nil;
fun playdate.keyboard.textChangedCallback(ok: boolean): nil;
fun playdate.keyboard.width(): nil;

global playdate.math;
fun playdate.math.lerp(min: number, max: number, t: number): number;

global playdate.menu;
local _Menu: playdate.menu;
fun playdate.menu:addCheckmarkMenuItem(title: string, initialValue?: boolean, callback?: function): nil;
fun playdate.menu:addMenuItem(title: string, callback: function): nil;
fun playdate.menu:addOptionsMenuItem(title: string, options: string[], initalValue?: string, callback?: function): nil;
fun playdate.menu:getMenuItems(): _MenuItem[];
fun playdate.menu:removeAllMenuItems(): nil;
fun playdate.menu:removeMenuItem(menuItem: _Menu): nil;

global playdate.menu.item;
local _MenuItem: playdate.menu.item = {
    title: string,
    value: (integer|boolean|string)
};
fun playdate.menu.item:getTitle(): string;
fun playdate.menu.item:getValue(): (integer|boolean|string);
fun playdate.menu.item:setCallback(callback: function): nil;
fun playdate.menu.item:setTitle(newTitle: string): nil;
fun playdate.menu.item:setValue(newValue: (integer|boolean|string)): nil;

global playdate.pathfinder;

global playdate.pathfinder.graph;
fun playdate.pathfinder.graph.new(nodeCount?: integer, coordinates?: integer[][]): _PathFinderGraph;
fun playdate.pathfinder.graph.new2DGrid(width: integer, height: integer, allowDiagonals?: boolean, includedNodes?: integer[]): _PathFinderGraph;
local _PathFinderGraph: playdate.pathfinder.graph;
fun playdate.pathfinder.graph:addConnectionToNodeWithID(fromNodeID: integer, toNodeID: integer, weight: number, addReciprocalConnection: boolean): nil;
fun playdate.pathfinder.graph:addConnections(connections: integer[][]): nil;
fun playdate.pathfinder.graph:addNewNode(id: integer, x?: integer, y?: integer, connectedNodes?: _PathFinderNode[], weights?: number[], addReciprocalConnections?: boolean): nil;
fun playdate.pathfinder.graph:addNewNodes(count: integer): nil;
fun playdate.pathfinder.graph:addNode(node: _PathFinderNode, connectedNodes?: _PathFinderNode[], weights?: number[], addReciprocalConnections?: boolean): nil;
fun playdate.pathfinder.graph:addNodes(nodes: _PathFinderNode[]): nil;
fun playdate.pathfinder.graph:allNodes(): _PathFinderNode[];
fun playdate.pathfinder.graph:findPath(startNode: _PathFinderNode, goalNode: _PathFinderNode, heuristicFunction?: fun(startNode: _PathFinderNode, goalNode: _PathFinderNode): integer, findPathToGoalAdjacentNodes?: boolean): _PathFinderNode[];
fun playdate.pathfinder.graph:findPathWithIDs(startNodeID: integer, goalNodeID: integer, heuristicFunction?: fun(startNode: _PathFinderNode, goalNode: _PathFinderNode): integer, findPathToGoalAdjacentNodes?: boolean): integer[];
fun playdate.pathfinder.graph:nodeWithID(id: integer): _PathFinderNode?;
fun playdate.pathfinder.graph:nodeWithXY(x: integer, y: integer): _PathFinderNode?;
fun playdate.pathfinder.graph:removeAllConnections(): nil;
fun playdate.pathfinder.graph:removeAllConnectionsFromNodeWithID(id: integer, removeIncoming?: boolean): nil;
fun playdate.pathfinder.graph:removeNode(node: _PathFinderNode): nil;
fun playdate.pathfinder.graph:removeNodeWithID(id: integer): nil;
fun playdate.pathfinder.graph:removeNodeWithXY(x: integer, y: integer): nil;
fun playdate.pathfinder.graph:setXYForNodeWithID(id: integer, x: integer, y: integer): nil;

global playdate.pathfinder.node;
local _PathFinderNode: playdate.pathfinder.node = {
    x: integer,
    y: integer,
    id: integer,
};
fun playdate.pathfinder.node:addConnection(node: _PathFinderNode, weight: number, addReciprocalConnection: boolean): nil;
fun playdate.pathfinder.node:addConnectionToNodeWithXY(x: integer, y: integer, weight: number, addReciprocalConnection: boolean): nil;
fun playdate.pathfinder.node:addConnections(nodes: _PathFinderNode[], weights: number[], addReciprocalConnections: boolean): nil;
fun playdate.pathfinder.node:connectedNodes(): _PathFinderNode[];
fun playdate.pathfinder.node:removeAllConnections(removeIncoming?: boolean): nil;
fun playdate.pathfinder.node:removeConnection(node: _PathFinderNode, removeReciprocal?: boolean): nil;
fun playdate.pathfinder.node:setXY(x: integer, y: integer): nil;

global playdate.simulator;
fun playdate.simulator.exit(): nil;
fun playdate.simulator.getURL(url: string): string;
fun playdate.simulator.writeToFile(image: _Image, path: string): nil;

global playdate.sound = {
    kFormat8bitMono: integer = 0,
    kFormat8bitStereo: integer = 1,
    kFormat16bitMono: integer = 2,
    kFormat16bitStereo: integer = 3,
    kLFOSquare: integer = 0,
    kLFOTriangle: integer = 1,
    kLFOSine: integer = 2,
    kLFOSampleAndHold: integer = 3,
    kLFOSawtoothUp: integer = 4,
    kLFOSawtoothDown: integer = 5,
    kWaveSquare: integer = 0,
    kWaveTriangle: integer = 1,
    kWaveSine: integer = 2,
    kWaveNoise: integer = 3,
    kWaveSawtooth: integer = 4,
    kWavePOPhase: integer = 5,
    kWavePODigital: integer = 6,
    kWavePOVosim: integer = 7,
};
fun playdate.sound.addEffect(effect: _SoundEffect): nil;
fun playdate.sound.playingSources(): _SoundSource[];
fun playdate.sound.removeEffect(effect: _SoundEffect): nil;
fun playdate.sound.resetTime(): nil;
fun playdate.sound.setOutputsActive(headphones: boolean, speaker: boolean): nil;
fun playdate.sound.getCurrentTime(): number;
fun playdate.sound.getHeadphoneState(changeCallback?: fun(): nil): (headphone: boolean, mic: boolean?);
fun playdate.sound.getSampleRate(): integer;

global playdate.sound.effect;
local _SoundEffect: playdate.sound.effect;

global playdate.sound.bitcrusher: _SoundEffect;
fun playdate.sound.bitcrusher.new(): _BitCrusher;
local _BitCrusher: playdate.sound.bitcrusher;
fun playdate.sound.bitcrusher:setAmount(amt: number): nil;
fun playdate.sound.bitcrusher:setAmountMod(signal: _Signal): nil;
fun playdate.sound.bitcrusher:setMix(level: number): nil;
fun playdate.sound.bitcrusher:setMixMod(signal: _Signal): nil;
fun playdate.sound.bitcrusher:setUndersampling(amt: number): nil;
fun playdate.sound.bitcrusher:setUndersamplingMod(signal: _Signal): nil;

global playdate.sound.onepolefilter: _SoundEffect;
fun playdate.sound.onepolefilter.new(): _OnePoleFilter;
local _OnePoleFilter: playdate.sound.onepolefilter;
fun playdate.sound.onepolefilter:setMix(level: number): nil;
fun playdate.sound.onepolefilter:setMixMod(signal: _Signal): nil;
fun playdate.sound.onepolefilter:setParameter(p: number): nil;
fun playdate.sound.onepolefilter:setParameterMod(m: _Signal): nil;

global playdate.sound.overdrive: _SoundEffect;
fun playdate.sound.overdrive.new(): _OverDrive;
local _OverDrive: playdate.sound.overdrive;
fun playdate.sound.overdrive:setGain(level: number): nil;
fun playdate.sound.overdrive:setLimit(level: number): nil;
fun playdate.sound.overdrive:setLimitMod(signal: _Signal): nil;
fun playdate.sound.overdrive:setMix(level: number): nil;
fun playdate.sound.overdrive:setMixMod(signal: _Signal): nil;
fun playdate.sound.overdrive:setOffset(level: number): nil;
fun playdate.sound.overdrive:setOffsetMod(signal: _Signal): nil;

global playdate.sound.ringmod: _SoundEffect;
fun playdate.sound.ringmod.new(): _RingMod;
local _RingMod: playdate.sound.ringmod;
fun playdate.sound.ringmod:setFrequency(f: number): nil;
fun playdate.sound.ringmod:setFrequencyMod(signal: _Signal): nil;
fun playdate.sound.ringmod:setMix(level: number): nil;
fun playdate.sound.ringmod:setMixMod(signal: _Signal): nil;

global playdate.sound.delayline: _SoundEffect;
fun playdate.sound.delayline.new(length: number): _DelayLine;
local _DelayLine: playdate.sound.delayline;
fun playdate.sound.delayline:addTap(delay: number): _DelayLineTap;
fun playdate.sound.delayline:setFeedback(level: number): nil;
fun playdate.sound.delayline:setMix(level: number): nil;
fun playdate.sound.delayline:setMixMod(signal: _Signal): nil;

global playdate.sound.twopolefilter: _SoundEffect;
fun playdate.sound.twopolefilter.new(type: integer): _TwoPoleFilter;
local _TwoPoleFilter: playdate.sound.twopolefilter;
fun playdate.sound.twopolefilter:setFrequency(f: number): nil;
fun playdate.sound.twopolefilter:setFrequencyMod(signal: _Signal): nil;
fun playdate.sound.twopolefilter:setGain(g: number): nil;
fun playdate.sound.twopolefilter:setMix(level: number): nil;
fun playdate.sound.twopolefilter:setMixMod(signal: _Signal): nil;
fun playdate.sound.twopolefilter:setResonance(r: _Rect): nil;
fun playdate.sound.twopolefilter:setResonanceMod(signal: _Signal): nil;
fun playdate.sound.twopolefilter:setType(type: integer): nil;

global playdate.sound.channel;
fun playdate.sound.channel.new(): _Channel;
local _Channel: playdate.sound.channel;
fun playdate.sound.channel:addEffect(effect: _SoundEffect): nil;
fun playdate.sound.channel:addSource(source: _SoundSource): nil;
fun playdate.sound.channel:getVolume(): number;
fun playdate.sound.channel:remove(): nil;
fun playdate.sound.channel:removeEffect(effect: _SoundEffect): nil;
fun playdate.sound.channel:removeSource(source: _SoundSource): nil;
fun playdate.sound.channel:setPan(pan: number): number;
fun playdate.sound.channel:setPanMod(signal: _Signal): nil;
fun playdate.sound.channel:setVolume(volume: number): nil;
fun playdate.sound.channel:setVolumeMod(signal: _Signal): nil;

global playdate.sound.signal;
local _Signal: playdate.sound.signal;
fun playdate.sound.signal:setOffset(offset: number): nil;
fun playdate.sound.signal:setScale(scale: integer): nil;

global playdate.sound.controlsignal: _Signal;
fun playdate.sound.controlsignal.new(): _ControlSignal;
local _ControlSignal: playdate.sound.controlsignal = {
    events: _SoundControlEvent
};
fun playdate.sound.controlsignal:addEvent(event: table): nil;
fun playdate.sound.controlsignal:addEvent(step: integer, value: number, interpolate?: boolean): nil;
fun playdate.sound.controlsignal:clearEvents(): nil;
fun playdate.sound.controlsignal:getControllerType(): integer;
fun playdate.sound.controlsignal:setControllerType(number: integer): nil;

global playdate.sound.envelope: _Signal;
fun playdate.sound.envelope.new(attack?: number, decay?: number, sustain?: number, release?: number): _Envelope;
local _Envelope: playdate.sound.envelope;
fun playdate.sound.envelope:setAttack(attack: number): nil;
fun playdate.sound.envelope:setCurvature(amount: number): nil;
fun playdate.sound.envelope:setDecay(decay: number): nil;
fun playdate.sound.envelope:setGlobal(flag: boolean): nil;
fun playdate.sound.envelope:setLegato(flag: boolean): nil;
fun playdate.sound.envelope:setOffset(offset: number): nil;
fun playdate.sound.envelope:setRateScaling(scaling: number, start?: number, _end: number): nil;
fun playdate.sound.envelope:setRelease(release: number): nil;
fun playdate.sound.envelope:setRetrigger(flag: boolean): nil;
fun playdate.sound.envelope:setScale(scale: integer): nil;
fun playdate.sound.envelope:setSustain(sustain: number): nil;
fun playdate.sound.envelope:setVelocitySensitivity(amount: number): nil;
fun playdate.sound.envelope:trigger(velocity: number, length?: number): nil;

global playdate.sound.lfo: _Signal;
fun playdate.sound.lfo.new(type?: integer): _LFO;
local _LFO: playdate.sound.lfo;
fun playdate.sound.lfo:setArpeggio(note1: number, ...: number): nil;
fun playdate.sound.lfo:setCenter(center: number): nil;
fun playdate.sound.lfo:setDelay(holdoff: number, ramp: number): nil;
fun playdate.sound.lfo:setDepth(depth: number): nil;
fun playdate.sound.lfo:setGlobal(flag: boolean): nil;
fun playdate.sound.lfo:setPhase(phase: number): nil;
fun playdate.sound.lfo:setRate(rate: number): nil;
fun playdate.sound.lfo:setRetrigger(flag: boolean): nil;
fun playdate.sound.lfo:setStartPhase(phase: number): nil;
fun playdate.sound.lfo:setType(type: integer): nil;

global playdate.sound.source;
local _SoundSource;

global playdate.sound.delaylinetap: _SoundSource;
local _DelayLineTap: playdate.sound.delaylinetap;
fun playdate.sound.delaylinetap:getVolume(): number;
fun playdate.sound.delaylinetap:setDelay(time: number): nil;
fun playdate.sound.delaylinetap:setDelayMod(signal: _Signal): nil;
fun playdate.sound.delaylinetap:setFlipChannels(flag: boolean): nil;
fun playdate.sound.delaylinetap:setVolume(level: number): nil;

global playdate.sound.fileplayer: _SoundSource;
fun playdate.sound.fileplayer.new(buffersize?: number): _FilePlayer;
fun playdate.sound.fileplayer.new(path: string, buffersize?: number): _FilePlayer;
local _FilePlayer: playdate.sound.fileplayer;
fun playdate.sound.fileplayer:didUnderrun(): boolean;
fun playdate.sound.fileplayer:getLength(): number;
fun playdate.sound.fileplayer:getOffset(): number;
fun playdate.sound.fileplayer:getRate(): number;
fun playdate.sound.fileplayer:getVolume(): (left_or_mono: number, right: number?);
fun playdate.sound.fileplayer:isPlaying(): boolean;
fun playdate.sound.fileplayer:load(path: string): nil;
fun playdate.sound.fileplayer:pause(): nil;
fun playdate.sound.fileplayer:play(repeatCount?: integer): (success: boolean, error: string?);
fun playdate.sound.fileplayer:setBufferSize(seconds: number): nil;
fun playdate.sound.fileplayer:setFinishCallback(func: fun(self: _FilePlayer, arg?: any), arg?: any): nil;
fun playdate.sound.fileplayer:setLoopCallback(callback: fun(self: _FilePlayer, arg?: any), arg?: any): nil;
fun playdate.sound.fileplayer:setLoopRange(start: number, _end: number, loopCallback?: fun(arg?: any): nil, arg?: any): nil;
fun playdate.sound.fileplayer:setOffset(seconds: number): nil;
fun playdate.sound.fileplayer:setRate(rate: integer): nil;
fun playdate.sound.fileplayer:setRateMod(signal: _Signal): nil;
fun playdate.sound.fileplayer:setStopOnUnderrun(flag: boolean): nil;
fun playdate.sound.fileplayer:setVolume(left: number, right?: number, fadeSeconds?: number, fadeCallback?: fun(self: _FilePlayer, arg?: any), arg?: any): nil;
fun playdate.sound.fileplayer:stop(): nil;

global playdate.sound.instrument: _SoundSource;
fun playdate.sound.instrument.new(synth?: _Synth): _Instrument;
local _Instrument: playdate.sound.instrument;
fun playdate.sound.instrument:addVoice(v: _Vector2D, note?: integer, rangeend?: integer, transpose?: integer): nil;
fun playdate.sound.instrument:allNotesOff(): nil;
fun playdate.sound.instrument:getVolume(): (left_or_mono: number, right: number?);
fun playdate.sound.instrument:noteOff(note: integer, when?: number): nil;
fun playdate.sound.instrument:playMIDINote(note: (number|string), vel?: number, length?: number, when?: number): nil;
fun playdate.sound.instrument:playNote(frequency: number, vel?: number, length?: number, when?: number): nil;
fun playdate.sound.instrument:setTranspose(halfsteps: number): nil;
fun playdate.sound.instrument:setVolume(left: integer, right?: integer): nil;

global playdate.sound.sampleplayer: _SoundSource;
fun playdate.sound.sampleplayer.new(path: string): _SamplePlayer;
fun playdate.sound.sampleplayer.new(sample: _Sample): _SamplePlayer;
local _SamplePlayer: playdate.sound.sampleplayer;
fun playdate.sound.sampleplayer:copy(): _SamplePlayer;
fun playdate.sound.sampleplayer:getLength(): number;
fun playdate.sound.sampleplayer:getOffset(): number;
fun playdate.sound.sampleplayer:getRate(): number;
fun playdate.sound.sampleplayer:getSample(): _Sample;
fun playdate.sound.sampleplayer:getVolume(): (left_or_mono: number, right: number?);
fun playdate.sound.sampleplayer:isPlaying(): boolean;
fun playdate.sound.sampleplayer:play(repeatCount?: integer, rate?: integer): nil;
fun playdate.sound.sampleplayer:playAt(when: number, vol?: number, rightvol?: number, rate?: integer): nil;
fun playdate.sound.sampleplayer:setFinishCallback(func: function, arg?: any): nil;
fun playdate.sound.sampleplayer:setLoopCallback(callback: function, arg?: any): nil;
fun playdate.sound.sampleplayer:setOffset(seconds: number): nil;
fun playdate.sound.sampleplayer:setPaused(flag: boolean): nil;
fun playdate.sound.sampleplayer:setPlayRange(start: integer, _end: integer): nil;
fun playdate.sound.sampleplayer:setRate(rate: integer): nil;
fun playdate.sound.sampleplayer:setRateMod(signal: _Signal): nil;
fun playdate.sound.sampleplayer:setSample(sample: _Sample): nil;
fun playdate.sound.sampleplayer:setVolume(left: integer, right?: integer): nil;
fun playdate.sound.sampleplayer:stop(): nil;

global playdate.sound.synth: _SoundSource;
fun playdate.sound.synth.new(sample: _Sample, sustainStart?: number, sustainEnd?: number): _Synth;
fun playdate.sound.synth.new(waveform?: integer): _Synth;
local _Synth: playdate.sound.synth;
fun playdate.sound.synth:copy(): _Synth;
fun playdate.sound.synth:getEnvelope(): _Envelope;
fun playdate.sound.synth:getVolume(): (left_or_mono: number, right: number?);
fun playdate.sound.synth:isPlaying(): boolean;
fun playdate.sound.synth:noteOff(): nil;
fun playdate.sound.synth:playMIDINote(note: (number|string), volume?: number, length?: number, when?: number): boolean;
fun playdate.sound.synth:playNote(pitch: (number|string), volume?: number, length?: number, when?: number): boolean;
fun playdate.sound.synth:setADSR(attack: number, decay: number, sustain: number, release: number, curvature: number): nil;
fun playdate.sound.synth:setAmplitudeMod(signal: _Signal): nil;
fun playdate.sound.synth:setAttack(time: number): nil;
fun playdate.sound.synth:setDecay(time: number): nil;
fun playdate.sound.synth:setEnvelopeCurvature(amount: number): nil;
fun playdate.sound.synth:setFinishCallback(_function: function): nil;
fun playdate.sound.synth:setFrequencyMod(signal: _Signal): nil;
fun playdate.sound.synth:setLegato(flag: boolean): nil;
fun playdate.sound.synth:setParameter(parameter: integer, value: number): nil;
fun playdate.sound.synth:setParameterMod(parameter: integer, signal: _Signal): nil;
fun playdate.sound.synth:setRelease(time: number): nil;
fun playdate.sound.synth:setSustain(level: number): nil;
fun playdate.sound.synth:setVolume(left: integer, right?: integer): nil;
fun playdate.sound.synth:setWaveform(waveform: integer): nil;
fun playdate.sound.synth:setWavetable(sample: _Sample, samplesize: integer, xsize: integer, ysize?: integer);
fun playdate.sound.synth:stop(): nil;

global playdate.sound.micinput;
fun playdate.sound.micinput.getLevel(): number;
fun playdate.sound.micinput.getSource(): string;
fun playdate.sound.micinput.recordToSample(buffer: _Sample, completionCallback: fun(sample: _Sample): nil): nil;
fun playdate.sound.micinput.startListening(): nil;
fun playdate.sound.micinput.stopListening(): nil;
fun playdate.sound.micinput.stopRecording(): nil;

global playdate.sound.sample;
fun playdate.sound.sample.new(path: string): _Sample;
local _Sample: playdate.sound.sample;
fun playdate.sound.sample:getFormat(): integer;
fun playdate.sound.sample:getLength(): (sample_seconds: number, buffer_size_seconds: number);
fun playdate.sound.sample:getSampleRate(): integer;
fun playdate.sound.sample:getSubsample(startOffset: integer, endOffset: integer): _Sample;
fun playdate.sound.sample:load(path: string): boolean;
fun playdate.sound.sample:play(repeatCount?: integer, rate?: integer): nil;
fun playdate.sound.sample:playAt(when: number, vol?: number, rightvol?: number, rate?: integer): nil;
fun playdate.sound.sample:save(filename: string): nil;

global playdate.sound.sequence;
fun playdate.sound.sequence.new(midi_path: string): _Sequence;
local _Sequence: playdate.sound.sequence;
fun playdate.sound.sequence:addTrack(track?: _Track): nil;
fun playdate.sound.sequence:allNotesOff(): nil;
fun playdate.sound.sequence:getCurrentStep(): number;
fun playdate.sound.sequence:getLength(): number;
fun playdate.sound.sequence:getTempo(): number;
fun playdate.sound.sequence:getTrackAtIndex(n: integer): _Track;
fun playdate.sound.sequence:getTrackCount(): integer;
fun playdate.sound.sequence:goToStep(step: integer, play?: boolean): nil;
fun playdate.sound.sequence:isPlaying(): boolean;
fun playdate.sound.sequence:play(finishCallback?: fun(self: _Sequence): nil): nil;
fun playdate.sound.sequence:setLoops(loopCount: integer): nil;
fun playdate.sound.sequence:setLoops(startStep: integer, endStep: integer, loopCount?: integer): nil;
fun playdate.sound.sequence:setTempo(stepsPerSecond: number): nil;
fun playdate.sound.sequence:setTrackAtIndex(n: integer, track: _Track): nil;
fun playdate.sound.sequence:stop(): nil;

global playdate.sound.track;
fun playdate.sound.track.new(): playdate.sound.track;
local _Track: playdate.sound.track;
fun playdate.sound.track:addControlSignal(s: _ControlSignal): nil;
fun playdate.sound.track:addNote(step: integer, note: (string|integer), length: number, velocity?: number): nil;
fun playdate.sound.track:addNote(table: (_SoundTrackNoteIn|_SoundTrackNote)): nil;
fun playdate.sound.track:clearNotes(): nil;
fun playdate.sound.track:getControlSignals(): _ControlSignal[];
fun playdate.sound.track:getInstrument(): _Instrument;
fun playdate.sound.track:getLength(): integer;
fun playdate.sound.track:getNotes(step?: integer, endstep?: integer): _SoundTrackNote[];
fun playdate.sound.track:getNotesActive(): integer;
fun playdate.sound.track:getPolyphony(): integer;
fun playdate.sound.track:removeNote(step: integer, note: integer): nil;
fun playdate.sound.track:setInstrument(inst: _Instrument): nil;
fun playdate.sound.track:setMuted(flag: boolean): nil;
fun playdate.sound.track:setNotes(list: table[]): nil;

global playdate.sound.track;
local _SoundTrackNote = {
    step: integer,
    note: number,
    length: integer,
    velocity: number,
};
local _SoundTrackNoteIn = {
    step: integer,
    note: (number|string),
    length: integer,
    velocity: number,
};

global playdate.string;
fun playdate.string.UUID(length: number): string;
fun playdate.string.trimLeadingWhitespace(str: string): string;
fun playdate.string.trimTrailingWhitespace(str: string): string;
fun playdate.string.trimWhitespace(str: string): string;

global playdate.timer;
fun playdate.timer.allTimers(): _Timer[];
fun playdate.timer.keyRepeatTimer(callback: function, ...: any): _Timer;
fun playdate.timer.keyRepeatTimerWithDelay(delayAfterInitialFiring: integer, delayAfterSecondFiring: integer, callback: function, ...: any): _Timer;
fun playdate.timer.new(duration: integer, callback: function, ...: any): _Timer;
fun playdate.timer.new(duration: integer, startValue?: number, endValue?: number, easingFunction?: function): _Timer;
fun playdate.timer.performAfterDelay(delay: integer, callback: function, ...: any): nil;
fun playdate.timer.updateCallback(...: any): nil;
fun playdate.timer.updateTimers(): nil;
local _Timer: playdate.timer = {
    currentTime: integer,
    delay: integer,
    discardOnCompletion: boolean,
    duration: integer,
    timeLeft: integer,
    repeats: boolean,
    reverses: boolean,
    timerEndedArgs: any[],
};
fun _Timer:timerEndedCallback(...: any): nil;
fun _Timer:updateCallback(...: any): nil;
fun playdate.timer:pause(): nil;
fun playdate.timer:remove(): nil;
fun playdate.timer:reset(): nil;
fun playdate.timer:start(): nil;

global playdate.ui;

global playdate.ui.crankIndicator = {
    clockwise: boolean,
};
fun playdate.ui.crankIndicator:draw(xOffset?: integer, yOffset?: integer): nil;
fun playdate.ui.crankIndicator:getBounds(): (x: integer, y: integer, width: integer, height: integer);
fun playdate.ui.crankIndicator:start(): nil;
fun playdate.ui.crankIndicator:update(): nil;

global playdate.ui.gridview;
fun playdate.ui.gridview.new(cellWidth: integer, cellHeight: integer): _GridView;
local _GridView: playdate.ui.gridview = {
    needsDisplay:boolean,
    backgroundImage: (_Image|_NineSlice),
    isScrolling:boolean,
    scrollEasingFunction:fun(t:number, b:number, c:number, d:number, a?:number, p?:number): number,
    easingAmplitude?: number, easingPeriod?: number,
    changeRowOnColumnWrap: boolean,
    scrollCellsToCenter: boolean,
};
fun playdate.ui.gridview:addHorizontalDividerAbove(section: integer, row: integer): nil;
fun playdate.ui.gridview:drawCell(section: integer, row: integer, column: integer, selected: boolean, x: integer, y: integer, width: integer, height: integer): nil;
fun playdate.ui.gridview:drawHorizontalDivider(x: integer, y: integer, width: integer, height: integer): nil;
fun playdate.ui.gridview:drawInRect(x: integer, y: integer, width: integer, height: integer): nil;
fun playdate.ui.gridview:drawSectionHeader(section: integer, x: integer, y: integer, width: integer, height: integer): nil;
fun playdate.ui.gridview:getCellBounds(section: integer, row: integer, column: integer, gridWidth?: integer): (x: integer, y: integer, width: integer, height: integer);
fun playdate.ui.gridview:getHorizontalDividerHeight(): integer;
fun playdate.ui.gridview:getNumberOfColumns(): integer;
fun playdate.ui.gridview:getNumberOfRowsInSection(section: integer): integer;
fun playdate.ui.gridview:getNumberOfSections(): integer;
fun playdate.ui.gridview:getScrollPosition(): (x: integer, y: integer);
fun playdate.ui.gridview:getSectionHeaderHeight(): integer;
fun playdate.ui.gridview:getSelectedRow(): integer;
fun playdate.ui.gridview:getSelection(): (section: integer, row: integer, column: integer);
fun playdate.ui.gridview:removeHorizontalDividers(): nil;
fun playdate.ui.gridview:scrollCellToCenter(section: integer, row: integer, column: integer, animated?: boolean): nil;
fun playdate.ui.gridview:scrollToCell(section: integer, row: integer, column: integer, animated?: boolean): nil;
fun playdate.ui.gridview:scrollToRow(row: integer, animated?: boolean): nil;
fun playdate.ui.gridview:scrollToTop(animated?: boolean): nil;
fun playdate.ui.gridview:selectNextColumn(wrapSelection: boolean, scrollToSelection?: boolean, animate?: boolean): nil;
fun playdate.ui.gridview:selectNextRow(wrapSelection: boolean, scrollToSelection?: boolean, animate?: boolean): nil;
fun playdate.ui.gridview:selectPreviousColumn(wrapSelection: boolean, scrollToSelection?: boolean, animate?: boolean): nil;
fun playdate.ui.gridview:selectPreviousRow(wrapSelection: boolean, scrollToSelection?: boolean, animate?: boolean): nil;
fun playdate.ui.gridview:setCellPadding(left: integer, right: integer, top: integer, bottom: integer): nil;
fun playdate.ui.gridview:setCellSize(cellWidth: integer, cellHeight: integer): nil;
fun playdate.ui.gridview:setContentInset(left: integer, right: integer, top: integer, bottom: integer): nil;
fun playdate.ui.gridview:setHorizontalDividerHeight(height: integer): nil;
fun playdate.ui.gridview:setNumberOfColumns(num: integer): nil;
fun playdate.ui.gridview:setNumberOfRows(...: integer): nil;
fun playdate.ui.gridview:setNumberOfRowsInSection(section: integer, num: integer): nil;
fun playdate.ui.gridview:setNumberOfSections(num: integer): nil;
fun playdate.ui.gridview:setScrollDuration(ms: integer): nil;
fun playdate.ui.gridview:setScrollPosition(x: integer, y: integer, animated?: boolean): nil;
fun playdate.ui.gridview:setSectionHeaderHeight(height: integer): nil;
fun playdate.ui.gridview:setSectionHeaderPadding(left: integer, right: integer, top: integer, bottom: integer): nil;
fun playdate.ui.gridview:setSelectedRow(row: integer): nil;
fun playdate.ui.gridview:setSelection(section: integer, row: integer, column: integer): nil;

fun table.create(arrayCount: integer, hashCount: integer): table;
fun table.deepcopy(source: table): table;
fun table.getsize(table: table): (arrayCount: integer, hashCount: integer);
fun table.indexOfElement(table: table, element: any): integer?;
fun table.shallowcopy(source: table, destination?: table): table;

fun class(name: string): _Class;
local _Class = {
    extends: fun(parentClass: any): nil,
    super: table,
};

fun where(): string;
fun print(...: any): nil;
fun printTable(table: table): nil;
fun sample(name: string, _function: function): nil;

local _DateTime = {
    year: integer,
    month: integer,
    day: integer,
    weekday: integer,
    hour: integer,
    minute: integer,
    second: integer,
    millisecond: integer,
};
local _InputHandler = {
    _AButtonDown?: fun(),
    _AButtonHeld?: fun(),
    _AButtonUp?: fun(),
    _BButtonDown?: fun(),
    _BButtonHeld?: fun(),
    _BButtonUp?: fun(),
    downButtonDown?: fun(),
    downButtonUp?: fun(),
    leftButtonDown?: fun(),
    leftButtonUp?: fun(),
    rightButtonDown?: fun(),
    rightButtonUp?: fun(),
    upButtonDown?: fun(),
    upButtonUp?: fun(),
    cranked?: fun(change:number, acceleratedChange:number)
};
local _Metadata = {
    name: string,
    author: string,
    description: string,
    bundleID: string,
    version: string,
    buildNumber: integer,
    pdxversion: integer,
    imagePath?: string,
    launchSoundPath?: string,
    contentWarning?: string,
    contentWarning2?: string,
};
local _ModTime = {
    year: integer,
    month: integer,
    day: integer,
    hour: integer,
    minute: integer,
    second: integer,
};
local _PowerStatus = {
    charging: boolean,
    _USB: boolean,
    screws: boolean,
};
local _SoundControlEvent = {
    step: integer,
    value: number,
    interpolate?: boolean,
};
local _SpriteCollisionData = {
    sprite: _Sprite,
    other: _Sprite,
    type: integer,
    overlaps: boolean,
    ti: number,
    move: _Vector2D,
    normal: _Vector2D,
    touch: _Point,
    spriteRect: _Rect,
    otherRect: _Rect,
    bounce?: _Point,
    slide?: _Point,
};
local _SpriteCollisionInfo = {
    sprite: _Sprite,
    entryPoint: _Point,
    exitPoint: _Point,
    t1: number,
    t2: number,
};
local _SystemInfo = {
    buildtime: string,
    commit: string,
    pdxcompatversion: integer,
    pdxversion: integer,
};
