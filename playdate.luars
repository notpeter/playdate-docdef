global json;
fun json.decode(str: string): table;
fun json.decodeFile(file: _File): table;
fun json.decodeFile(path: string): table;
fun json.encode(table: table): string;
fun json.encodePretty(table: table): string;
fun json.encodeToFile(file: _File, pretty: boolean, table: table): nil;
fun json.encodeToFile(path: string, pretty?: boolean, table?: table): nil;

global kTextAlignment = {
    left: integer = 0,
    right: integer = 1,
    center: integer = 2,
};

global playdate = {
    argv: string[],
    isSimulator: boolean,
    kButtonLeft: integer = 1,
    kButtonRight: integer = 2,
    kButtonUp: integer = 4,
    kButtonDown: integer = 8,
    kButtonB: integer = 16,
    kButtonA: integer = 32,
    metadate: _Metadata,
    systeminfo: _SystemInfo,
};
fun playdate.AButtonDown(): nil;
fun playdate.AButtonHeld(): nil;
fun playdate.AButtonUp(): nil;
fun playdate.BButtonDown(): nil;
fun playdate.BButtonHeld(): nil;
fun playdate.BButtonUp(): nil;
fun playdate.GMTTimeFromEpoch(seconds: integer, milliseconds: integer): _DateTime;
fun playdate.accelerometerIsRunning(): boolean;
fun playdate.apiVersion(): (api_version: integer, runtime_minimum_api_version: integer);
fun playdate.buttonIsPressed(button: integer): boolean;
fun playdate.buttonJustPressed(button: integer): boolean;
fun playdate.buttonJustReleased(button: integer): boolean;
fun playdate.clearConsole(): nil;
fun playdate.crankDocked(): nil;
fun playdate.crankUndocked(): nil;
fun playdate.cranked(change: number, acceleratedChange: number): nil;
fun playdate.debugDraw(): nil;
fun playdate.deviceDidUnlock(): nil;
fun playdate.deviceWillLock(): nil;
fun playdate.deviceWillSleep(): nil;
fun playdate.downButtonDown(): nil;
fun playdate.downButtonUp(): nil;
fun playdate.drawFPS(x: integer, y: integer): nil;
fun playdate.epochFromGMTTime(time: _DateTime): (seconds: integer, milliseconds: integer);
fun playdate.epochFromTime(time: _DateTime): (seconds: integer, milliseconds: integer);
fun playdate.gameWillPause(): nil;
fun playdate.gameWillResume(): nil;
fun playdate.gameWillTerminate(): nil;
fun playdate.getBatteryPercentage(): integer;
fun playdate.getBatteryVoltage(): number;
fun playdate.getButtonState(): (current: integer, pressed: integer, released: integer);
fun playdate.getCrankChange(): number;
fun playdate.getCrankPosition(): number;
fun playdate.getCrankTicks(ticksPerRevolution: number): number;
fun playdate.getCurrentTimeMilliseconds(): integer;
fun playdate.getElapsedTime(): number;
fun playdate.getFPS(): number;
fun playdate.getFlipped(): boolean;
fun playdate.getGMTTime(): _DateTime;
fun playdate.getPowerStatus(): _PowerStatus;
fun playdate.getReduceFlashing(): boolean;
fun playdate.getSecondsSinceEpoch(): (seconds: integer, milliseconds: integer);
fun playdate.getStats(): table;
fun playdate.getSystemLanguage(): integer;
fun playdate.getSystemMenu(): _Menu;
fun playdate.getTime(): _DateTime;
fun playdate.isCrankDocked(): boolean;
fun playdate.keyPressed(key: string): nil;
fun playdate.keyReleased(key: string): nil;
fun playdate.leftButtonDown(): nil;
fun playdate.leftButtonUp(): nil;
fun playdate.readAccelerometer(): (x: number, y: number, z: number);
fun playdate.resetElapsedTime(): nil;
fun playdate.rightButtonDown(): nil;
fun playdate.rightButtonUp(): nil;
fun playdate.setAutoLockDisabled(disable: boolean): nil;
fun playdate.setCollectsGarbage(flag: boolean): nil;
fun playdate.setCrankSoundsDisabled(disable: boolean): nil;
fun playdate.setDebugDrawColor(r: number, g: number, b: number, a: number): nil;
fun playdate.setGCScaling(min: number, max: number): nil;
fun playdate.setMenuImage(image: _Image, xOffset?: integer): nil;
fun playdate.setMinimumGCTime(ms: integer): nil;
fun playdate.setNewlinePrinted(flag: boolean): nil;
fun playdate.setStatsInterval(seconds: number): nil;
fun playdate.shouldDisplay24HourTime(): boolean;
fun playdate.start(): nil;
fun playdate.startAccelerometer(): nil;
fun playdate.stop(): nil;
fun playdate.stopAccelerometer(): nil;
fun playdate.timeFromEpoch(seconds: integer, milliseconds: integer): _DateTime;
fun playdate.upButtonDown(): nil;
fun playdate.upButtonUp(): nil;
fun playdate.update(): nil;
fun playdate.wait(milliseconds: integer): nil;

global playdate.datastore;
fun playdate.datastore.delete(filename?: string): boolean;
fun playdate.datastore.read(filename?: string): table?;
fun playdate.datastore.readImage(path: string): _Image?;
fun playdate.datastore.write(table: table, filename?: string, pretty: boolean): nil;
fun playdate.datastore.writeImage(image: _Image, path: string): nil;

global playdate.display;
fun playdate.display.flush(): nil;
fun playdate.display.getHeight(): integer;
fun playdate.display.getInverted(): boolean;
fun playdate.display.getMosaic(): (x: integer, y: integer);
fun playdate.display.getOffset(): (x: integer, y: integer);
fun playdate.display.getRect(): _Rect;
fun playdate.display.getRefreshRate(): integer;
fun playdate.display.getScale(): integer;
fun playdate.display.getSize(): (width: integer, height: integer);
fun playdate.display.getWidth(): integer;
fun playdate.display.loadImage(path: string): nil;
fun playdate.display.setFlipped(x: integer, y: integer): nil;
fun playdate.display.setInverted(flag: boolean): nil;
fun playdate.display.setMosaic(x: integer, y: integer): nil;
fun playdate.display.setOffset(x: integer, y: integer): nil;
fun playdate.display.setRefreshRate(rate: number): nil;
fun playdate.display.setScale(scale: integer): nil;

global playdate.easingFunctions;
fun playdate.easingFunctions.inBack(t: number, b: number, c: number, d: number, s?: number): number;
fun playdate.easingFunctions.inBounce(t: number, b: number, c: number, d: number): number;
fun playdate.easingFunctions.inCirc(t: number, b: number, c: number, d: number): number;
fun playdate.easingFunctions.inCubic(t: number, b: number, c: number, d: number): number;
fun playdate.easingFunctions.inElastic(t: number, b: number, c: number, d: number, a?: number, p?: number): number;
fun playdate.easingFunctions.inExpo(t: number, b: number, c: number, d: number): number;
fun playdate.easingFunctions.inOutBack(t: number, b: number, c: number, d: number, s?: number): number;
fun playdate.easingFunctions.inOutBounce(t: number, b: number, c: number, d: number): number;
fun playdate.easingFunctions.inOutCirc(t: number, b: number, c: number, d: number): number;
fun playdate.easingFunctions.inOutCubic(t: number, b: number, c: number, d: number): number;
fun playdate.easingFunctions.inOutElastic(t: number, b: number, c: number, d: number, a?: number, p?: number): number;
fun playdate.easingFunctions.inOutExpo(t: number, b: number, c: number, d: number): number;
fun playdate.easingFunctions.inOutQuad(t: number, b: number, c: number, d: number): number;
fun playdate.easingFunctions.inOutQuart(t: number, b: number, c: number, d: number): number;
fun playdate.easingFunctions.inOutQuint(t: number, b: number, c: number, d: number): number;
fun playdate.easingFunctions.inOutSine(t: number, b: number, c: number, d: number): number;
fun playdate.easingFunctions.inQuad(t: number, b: number, c: number, d: number): number;
fun playdate.easingFunctions.inQuart(t: number, b: number, c: number, d: number): number;
fun playdate.easingFunctions.inQuint(t: number, b: number, c: number, d: number): number;
fun playdate.easingFunctions.inSine(t: number, b: number, c: number, d: number): number;
fun playdate.easingFunctions.linear(t: number, b: number, c: number, d: number): number;
fun playdate.easingFunctions.outBack(t: number, b: number, c: number, d: number, s?: number): number;
fun playdate.easingFunctions.outBounce(t: number, b: number, c: number, d: number): number;
fun playdate.easingFunctions.outCirc(t: number, b: number, c: number, d: number): number;
fun playdate.easingFunctions.outCubic(t: number, b: number, c: number, d: number): number;
fun playdate.easingFunctions.outElastic(t: number, b: number, c: number, d: number, a?: number, p?: number): number;
fun playdate.easingFunctions.outExpo(t: number, b: number, c: number, d: number): number;
fun playdate.easingFunctions.outInBack(t: number, b: number, c: number, d: number, s?: number): number;
fun playdate.easingFunctions.outInBounce(t: number, b: number, c: number, d: number): number;
fun playdate.easingFunctions.outInCirc(t: number, b: number, c: number, d: number): number;
fun playdate.easingFunctions.outInCubic(t: number, b: number, c: number, d: number): number;
fun playdate.easingFunctions.outInElastic(t: number, b: number, c: number, d: number, a?: number, p?: number): number;
fun playdate.easingFunctions.outInExpo(t: number, b: number, c: number, d: number): number;
fun playdate.easingFunctions.outInQuad(t: number, b: number, c: number, d: number): number;
fun playdate.easingFunctions.outInQuart(t: number, b: number, c: number, d: number): number;
fun playdate.easingFunctions.outInQuint(t: number, b: number, c: number, d: number): number;
fun playdate.easingFunctions.outInSine(t: number, b: number, c: number, d: number): number;
fun playdate.easingFunctions.outQuad(t: number, b: number, c: number, d: number): number;
fun playdate.easingFunctions.outQuart(t: number, b: number, c: number, d: number): number;
fun playdate.easingFunctions.outQuint(t: number, b: number, c: number, d: number): number;
fun playdate.easingFunctions.outSine(t: number, b: number, c: number, d: number): number;

global playdate.file = {
    kFileRead: integer = 3,
    kFileAppend: integer = 8,
    kFileWrite: integer = 4,
};
fun playdate.file.delete(path: string, recursive?: boolean): boolean;
fun playdate.file.exists(path: string): boolean;
fun playdate.file.getSize(path: string): integer;
fun playdate.file.getType(path: string): string;
fun playdate.file.isdir(path: string): boolean;
fun playdate.file.listFiles(path: string, showhidden?: boolean): string[];
fun playdate.file.load(path: string, env?: table): function;
fun playdate.file.mkdir(path: string): nil;
fun playdate.file.modtime(path: string): _ModTime;
fun playdate.file.open(path: string, mode?: integer): (file: _File?, error: string?);
fun playdate.file.rename(path: string, newPath: string): boolean;
fun playdate.file.run(path: string, env?: table): nil;

global playdate.file.file;
local _File: playdate.file.file;
fun _File:close(): nil;
fun _File:flush(): nil;
fun _File:read(numberOfBytes: integer): (numberOfBytes: integer, error: string?);
fun _File:readline(): string;
fun _File:seek(offset: integer): nil;
fun _File:tell(): integer;
fun _File:write(string: string): (bytes_written: integer, error: string?);

global playdate.frameTimer;
fun playdate.frameTimer.allTimers(): _FrameTimer[];
fun playdate.frameTimer.new(duration: integer, callback: function, ...: any): _FrameTimer;
fun playdate.frameTimer.new(duration: integer, startValue?: number, endValue?: number, easingFunction?: function): _FrameTimer;
fun playdate.frameTimer.performAfterDelay(delay: integer, callback: function, ...: any): nil;
fun playdate.frameTimer.updateTimers(): nil;
local _FrameTimer: playdate.frameTimer = {
    delay: integer,
    discardOnCompletion: boolean,
    duration: integer,
    frame: integer,
    repeats: boolean,
    reverses: boolean,
    timerEndedArgs: any,
};
fun _FrameTimer:pause(): nil;
fun _FrameTimer:remove(): nil;
fun _FrameTimer:reset(): nil;
fun _FrameTimer:start(): nil;

global playdate.geometry = {
    kUnflipped: integer = 0,
    kFlippedX: integer = 1,
    kFlippedY: integer = 2,
    kFlippedXY: integer = 3,
};
fun playdate.geometry.distanceToPoint(x1: integer, y1: integer, x2: integer, y2: integer): number;
fun playdate.geometry.squaredDistanceToPoint(x1: integer, y1: integer, x2: integer, y2: integer): number;

global playdate.geometry.affineTransform;
fun playdate.geometry.affineTransform.new(): _AffineTransform;
fun playdate.geometry.affineTransform.new(m11: number, m12: number, m21: number, m22: number, tx: number, ty: number): _AffineTransform;
local _AffineTransform: playdate.geometry.affineTransform;
fun _AffineTransform:__mul(p: _Point): _Point;
fun _AffineTransform:__mul(t: _AffineTransform): _AffineTransform;
fun _AffineTransform:__mul(v: _Vector2D): _Vector2D;
fun _AffineTransform:concat(af: _AffineTransform): nil;
fun _AffineTransform:copy(): _AffineTransform;
fun _AffineTransform:invert(): nil;
fun _AffineTransform:reset(): nil;
fun _AffineTransform:rotate(angle: number, point?: _Point): nil;
fun _AffineTransform:rotate(angle: number, x?: integer, y?: integer): nil;
fun _AffineTransform:rotatedBy(angle: number, point?: _Point): _AffineTransform;
fun _AffineTransform:rotatedBy(angle: number, x?: integer, y?: integer): _AffineTransform;
fun _AffineTransform:scale(sx: number, sy?: number): nil;
fun _AffineTransform:scaledBy(sx: number, sy?: number): _AffineTransform;
fun _AffineTransform:skew(sx: number, sy: number): nil;
fun _AffineTransform:skewedBy(sx: number, sy: number): _AffineTransform;
fun _AffineTransform:transformAABB(r: _Rect): nil;
fun _AffineTransform:transformLineSegment(ls: _LineSegment): nil;
fun _AffineTransform:transformPoint(p: _Point): nil;
fun _AffineTransform:transformPolygon(p: _Polygon): nil;
fun _AffineTransform:transformXY(x: integer, y: integer): (x: number, y: number);
fun _AffineTransform:transformedAABB(r: _Rect): _Rect;
fun _AffineTransform:transformedLineSegment(ls: _LineSegment): _LineSegment;
fun _AffineTransform:transformedPoint(p: _Point): _Point;
fun _AffineTransform:transformedPolygon(p: _Polygon): _Polygon;
fun _AffineTransform:translate(dx: integer, dy: integer): nil;
fun _AffineTransform:translatedBy(dx: integer, dy: integer): _AffineTransform;

global playdate.geometry.arc;
fun playdate.geometry.arc.new(x: integer, y: integer, radius: number, startAngle: number, endAngle: number, direction?: boolean): _Arc;
local _Arc: playdate.geometry.arc = {
    x: integer,
    y: integer,
    radius: integer,
    startAngle: number,
    endAngle: number,
    direction: boolean,
};
fun _Arc:copy(): _Arc;
fun _Arc:isClockwise(): boolean;
fun _Arc:length(): number;
fun _Arc:pointOnArc(distance: integer, extend: boolean): _Point;
fun _Arc:setIsClockwise(flag: boolean): nil;

global playdate.geometry.lineSegment;
fun playdate.geometry.lineSegment.fast_intersection(x1: integer, y1: integer, x2: integer, y2: integer, x3: integer, y3: integer, x4: integer, y4: integer): (intersects: boolean, x: number?, y: number?);
fun playdate.geometry.lineSegment.new(x1: integer, y1: integer, x2: integer, y2: integer): _LineSegment;
local _LineSegment: playdate.geometry.lineSegment = {
    x1: integer,
    y1: integer,
    x2: integer,
    y2: integer,
};
fun _LineSegment:closestPointOnLineToPoint(p: _Point): _Point;
fun _LineSegment:copy(): _LineSegment;
fun _LineSegment:intersectsLineSegment(ls: _LineSegment): (intersects: boolean, intersection: _Point?);
fun _LineSegment:intersectsPolygon(poly: _Polygon): (intersects: boolean, intersectionPoints: _Point[]?);
fun _LineSegment:intersectsRect(rect: _Rect): (intersects: boolean, intersectionPoints: _Point[]?);
fun _LineSegment:length(): number;
fun _LineSegment:midPoint(): _Point;
fun _LineSegment:offset(dx: integer, dy: integer): nil;
fun _LineSegment:offsetBy(dx: integer, dy: integer): _LineSegment;
fun _LineSegment:pointOnLine(distance: integer, extend?: boolean): _Point;
fun _LineSegment:segmentVector(): _Vector2D;
fun _LineSegment:unpack(): (x1: number, y1: number, x2: number, y2: number);

global playdate.geometry.point;
fun playdate.geometry.point.new(x: integer, y: integer): _Point;
local _Point: playdate.geometry.point = {
    x: number,
    y: number,
};
fun _Point:__add(v: _Vector2D): _Point;
fun _Point:__concat(p2: _Point): _LineSegment;
fun _Point:__mul(t: _AffineTransform): _Point;
fun _Point:__sub(p2: _Point): _Vector2D;
fun _Point:copy(): _Point;
fun _Point:distanceToPoint(p: _Point): number;
fun _Point:offset(dx: integer, dy: integer): nil;
fun _Point:offsetBy(dx: integer, dy: integer): _Point;
fun _Point:squaredDistanceToPoint(p: _Point): number;
fun _Point:unpack(): (x: number, y: number);

global playdate.geometry.polygon;
fun playdate.geometry.polygon.new(numberOfVertices: integer): _Polygon;
fun playdate.geometry.polygon.new(p1: _Point, p2: _Point, ...: integer): _Polygon;
fun playdate.geometry.polygon.new(x1: integer, y1: integer, x2: integer, y2: integer, ...: integer): _Polygon;
local _Polygon: playdate.geometry.polygon;
fun _Polygon:__mul(t: _AffineTransform): _Polygon;
fun _Polygon:close(): nil;
fun _Polygon:containsPoint(p: _Point, fillRule?: integer): boolean;
fun _Polygon:containsPoint(x: integer, y: integer, fillRule?: integer): boolean;
fun _Polygon:copy(): _Polygon;
fun _Polygon:count(): integer;
fun _Polygon:getBounds(): (x: number, y: number, width: number, height: number);
fun _Polygon:getBoundsRect(): _Rect;
fun _Polygon:getPointAt(n: integer): _Point;
fun _Polygon:intersects(p: _Point): boolean;
fun _Polygon:isClosed(): boolean;
fun _Polygon:length(): number;
fun _Polygon:pointOnPolygon(distance: integer, extend?: boolean): _Point;
fun _Polygon:setPointAt(n: integer, x: integer, y: integer): nil;
fun _Polygon:translate(dx: integer, dy: integer): nil;

global playdate.geometry.rect;
fun playdate.geometry.rect.fast_intersection(x1: integer, y1: integer, w1: integer, h1: integer, x2: integer, y2: integer, w2: integer, h2: integer): (x: number, y: number, width: number, height: number);
fun playdate.geometry.rect.fast_union(x1: integer, y1: integer, w1: integer, h1: integer, x2: integer, y2: integer, w2: integer, h2: integer): (x: number, y: number, width: number, height: number);
fun playdate.geometry.rect.new(x: integer, y: integer, width: integer, height: integer): _Rect;
local _Rect: playdate.geometry.rect = {
    x: number,
    y: number,
    width: number,
    height: number,
    top: number,
    bottom: number,
    left: number,
    right: number,
    size: _Size,
};
fun _Rect:centerPoint(): _Point;
fun _Rect:containsPoint(p: _Point): boolean;
fun _Rect:containsPoint(x: integer, y: integer): boolean;
fun _Rect:containsRect(r2: _Rect): boolean;
fun _Rect:containsRect(x: integer, y: integer, width: integer, height: integer): boolean;
fun _Rect:copy(): _Rect;
fun _Rect:flipRelativeToRect(r2: _Rect, flip: (integer|string)): nil;
fun _Rect:inset(dx: integer, dy: integer): nil;
fun _Rect:insetBy(dx: integer, dy: integer): _Rect;
fun _Rect:intersection(r2: _Rect): _Rect;
fun _Rect:intersects(r2: _Rect): boolean;
fun _Rect:isEmpty(): boolean;
fun _Rect:isEqual(r2: _Rect): boolean;
fun _Rect:offset(dx: integer, dy: integer): nil;
fun _Rect:offsetBy(dx: integer, dy: integer): _Rect;
fun _Rect:toPolygon(): _Polygon;
fun _Rect:union(r2: _Rect): _Rect;
fun _Rect:unpack(): (x: number, y: number, width: number, height: number);

global playdate.geometry.size;
fun playdate.geometry.size.new(width: integer, height: integer): _Size;
local _Size: playdate.geometry.size = {
    width: number,
    height: number,
};
fun _Size:copy(): _Size;
fun _Size:unpack(): (width: number, height: number);

global playdate.geometry.vector2D;
fun playdate.geometry.vector2D.new(x: integer, y: integer): _Vector2D;
fun playdate.geometry.vector2D.newPolar(length: number, angle: number): _Vector2D;
local _Vector2D: playdate.geometry.vector2D = {
    dx: number,
    dy: number,
};
fun _Vector2D:__add(v2: _Vector2D): _Vector2D;
fun _Vector2D:__div(s: number): _Vector2D;
fun _Vector2D:__mul(s: number): _Vector2D;
fun _Vector2D:__mul(t: _AffineTransform): _Vector2D;
fun _Vector2D:__mul(v2: _Vector2D): _Vector2D;
fun _Vector2D:__sub(v2: _Vector2D): _Vector2D;
fun _Vector2D:__unm(): _Vector2D;
fun _Vector2D:addVector(v: _Vector2D): nil;
fun _Vector2D:angleBetween(v: _Vector2D): number;
fun _Vector2D:copy(): _Vector2D;
fun _Vector2D:dotProduct(v: _Vector2D): number;
fun _Vector2D:leftNormal(): _Vector2D;
fun _Vector2D:magnitude(): number;
fun _Vector2D:magnitudeSquared(): number;
fun _Vector2D:normalize(): nil;
fun _Vector2D:normalized(): _Vector2D;
fun _Vector2D:projectAlong(v: _Vector2D): nil;
fun _Vector2D:projectedAlong(v: _Vector2D): _Vector2D;
fun _Vector2D:rightNormal(): _Vector2D;
fun _Vector2D:scale(s: number): nil;
fun _Vector2D:scaledBy(s: number): _Vector2D;
fun _Vector2D:unpack(): (x: number, y: number);

global playdate.graphics = {
    kColorBlack: integer = 0,
    kColorWhite: integer = 1,
    kColorClear: integer = 2,
    kColorXOR: integer = 3,
    kDrawModeCopy: integer = 0,
    kDrawModeWhiteTransparent: integer = 1,
    kDrawModeBlackTransparent: integer = 2,
    kDrawModeFillWhite: integer = 3,
    kDrawModeFillBlack: integer = 4,
    kDrawModeXOR: integer = 5,
    kDrawModeNXOR: integer = 6,
    kDrawModeInverted: integer = 7,
    kImageUnflipped: integer = 0,
    kImageFlippedX: integer = 1,
    kImageFlippedY: integer = 2,
    kImageFlippedXY: integer = 3,
    kPolygonFillNonZero: integer = 0,
    kPolygonFillEvenOdd: integer = 1,
    kStrokeCentered: integer = 0,
    kStrokeInside: integer = 1,
    kStrokeOutside: integer = 2
};
fun playdate.graphics.checkAlphaCollision(image1: _Image, x1: integer, y1: integer, flip1: integer, image2: _Image, x2: integer, y2: integer, flip2: integer): boolean;
fun playdate.graphics.clear(color?: integer): nil;
fun playdate.graphics.clearClipRect(): nil;
fun playdate.graphics.clearStencil(): nil;
fun playdate.graphics.clearStencilImage(): nil;
fun playdate.graphics.drawArc(arc: _Arc): nil;
fun playdate.graphics.drawArc(x: integer, y: integer, radius: number, startAngle: number, endAngle: number): nil;
fun playdate.graphics.drawCircleAtPoint(p: _Point, radius: number): nil;
fun playdate.graphics.drawCircleAtPoint(x: integer, y: integer, radius: number): nil;
fun playdate.graphics.drawCircleInRect(r: _Rect): nil;
fun playdate.graphics.drawCircleInRect(x: integer, y: integer, width: integer, height: integer): nil;
fun playdate.graphics.drawEllipseInRect(rect: _Rect, startAngle?: number, endAngle?: number): nil;
fun playdate.graphics.drawEllipseInRect(x: integer, y: integer, width: integer, height: integer, startAngle?: number, endAngle?: number): nil;
fun playdate.graphics.drawLine(x1: integer, y1: integer, x2: integer, y2: integer): nil;
fun playdate.graphics.drawLocalizedText(key: string, x: integer, y: integer, language?: (integer|string), leadingAdjustment?: integer): nil;
fun playdate.graphics.drawLocalizedTextAligned(text: string, x: integer, y: integer, alignment: integer, language?: (integer|string), leadingAdjustment?: integer): nil;
fun playdate.graphics.drawLocalizedTextInRect(text: string, rect: _Rect, leadingAdjustment?: integer, truncationString?: string, alignment?: integer, font?: _Font, language?: (integer|string)): nil;
fun playdate.graphics.drawLocalizedTextInRect(text: string, x: integer, y: integer, width: integer, height: integer, leadingAdjustment?: integer, truncationString?: string, alignment?: integer, font?: playdate.graphics.font, language?: (integer|string)): nil;
fun playdate.graphics.drawPixel(x: integer, y: integer): nil;
fun playdate.graphics.drawPolygon(p: _Polygon): nil;
fun playdate.graphics.drawPolygon(x1: integer, y1: integer, x2: integer, y2: integer, ...?: integer): nil;
fun playdate.graphics.drawRect(r: _Rect): nil;
fun playdate.graphics.drawRect(x: integer, y: integer, w: integer, h: integer): nil;
fun playdate.graphics.drawRoundRect(r: _Rect, radius: number): nil;
fun playdate.graphics.drawRoundRect(x: integer, y: integer, w: integer, h: integer, radius: number): nil;
fun playdate.graphics.drawSineWave(startX: integer, startY: integer, endX: integer, endY: integer, startAmplitude: integer, endAmplitude: integer, period: integer, phaseShift?: integer): nil;
fun playdate.graphics.drawText(text: string, x: integer, y: integer, fontFamily?: table<integer, _Font>, leadingAdjustment?: integer): nil;
fun playdate.graphics.drawTextAligned(text: string, x: integer, y: integer, alignment: integer, leadingAdjustment?: integer): nil;
fun playdate.graphics.drawTextInRect(text: string, rect: _Rect, leadingAdjustment?: integer, truncationString?: string, alignment?: integer, font?: _Font): nil;
fun playdate.graphics.drawTextInRect(text: string, x: integer, y: integer, width: integer, height: integer, leadingAdjustment?: integer, truncationString?: string, alignment?: integer, font?: playdate.graphics.font): nil;
fun playdate.graphics.drawTriangle(x1: integer, y1: integer, x2: integer, y2: integer, x3: integer, y3: integer): nil;
fun playdate.graphics.fillCircleAtPoint(p: _Point, radius: number): nil;
fun playdate.graphics.fillCircleAtPoint(x: integer, y: integer, radius: number): nil;
fun playdate.graphics.fillCircleInRect(r: _Rect): nil;
fun playdate.graphics.fillCircleInRect(x: integer, y: integer, width: integer, height: integer): nil;
fun playdate.graphics.fillEllipseInRect(rect: _Rect, startAngle?: number, endAngle?: number): nil;
fun playdate.graphics.fillEllipseInRect(x: integer, y: integer, width: integer, height: integer, startAngle?: number, endAngle?: number): nil;
fun playdate.graphics.fillPolygon(p: _Polygon): nil;
fun playdate.graphics.fillPolygon(x1: integer, y1: integer, x2: integer, y2: integer, ...?: integer): nil;
fun playdate.graphics.fillRect(r: _Rect): nil;
fun playdate.graphics.fillRect(x: integer, y: integer, width: integer, height: integer): nil;
fun playdate.graphics.fillRoundRect(r: _Rect, radius: number): nil;
fun playdate.graphics.fillRoundRect(x: integer, y: integer, w: integer, h: integer, radius: number): nil;
fun playdate.graphics.fillTriangle(x1: integer, y1: integer, x2: integer, y2: integer, x3: integer, y3: integer): nil;
fun playdate.graphics.generateQRCode(stringToEncode: string, desiredEdgeDimension: integer, callback: function): nil;
fun playdate.graphics.getBackgroundColor(): integer;
fun playdate.graphics.getClipRect(): (x: integer, y: integer, width: integer, height: integer);
fun playdate.graphics.getColor(): integer;
fun playdate.graphics.getDisplayImage(): _Image;
fun playdate.graphics.getDrawOffset(): (x: integer, y: integer);
fun playdate.graphics.getFont(variant?: (integer|string)): _Font;
fun playdate.graphics.getFontTracking(): integer;
fun playdate.graphics.getImageDrawMode(): integer;
fun playdate.graphics.getLineWidth(): integer;
fun playdate.graphics.getLocalizedText(key: string, language?: (integer|string)): string;
fun playdate.graphics.getScreenClipRect(): (x: integer, y: integer, width: integer, height: integer);
fun playdate.graphics.getStrokeLocation(): integer;
fun playdate.graphics.getSystemFont(variant?: (integer|string)): _Font;
fun playdate.graphics.getTextSize(str: string, fontFamily?: table<integer, _Font>, leadingAdjustment?: integer): (width: integer, height: integer);
fun playdate.graphics.getTextSizeForMaxWidth(text: string, maxWidth: integer, leadingAdjustment?: integer, font?: _Font): (width: integer, height: integer);
fun playdate.graphics.getWorkingImage(): _Image;
fun playdate.graphics.lockFocus(image: _Image): nil;
fun playdate.graphics.perlin(x: integer, y: integer, z: integer, _repeat: number, octaves?: integer, persistence?: number): number;
fun playdate.graphics.perlinArray(count: integer, x: integer, dx: integer, y?: integer, dy?: integer, z?: integer, dz?: integer, _repeat: number, octaves?: integer, persistence?: number): number[];
fun playdate.graphics.popContext(): nil;
fun playdate.graphics.pushContext(image?: _Image): nil;
fun playdate.graphics.setBackgroundColor(color: integer): nil;
fun playdate.graphics.setClipRect(rect: _Rect): nil;
fun playdate.graphics.setClipRect(x: integer, y: integer, width: integer, height: integer): nil;
fun playdate.graphics.setColor(color: integer): nil;
fun playdate.graphics.setDitherPattern(alpha: number, ditherType?: integer): nil;
fun playdate.graphics.setDrawOffset(x: integer, y: integer): nil;
fun playdate.graphics.setFont(font: _Font, variant?: (integer|string)): nil;
fun playdate.graphics.setFontFamily(fontFamily: table<integer, _Font>): nil;
fun playdate.graphics.setFontTracking(pixels: integer): nil;
fun playdate.graphics.setImageDrawMode(mode: integer): nil;
fun playdate.graphics.setLineCapStyle(style: integer): nil;
fun playdate.graphics.setLineWidth(width: integer): nil;
fun playdate.graphics.setPattern(pattern: integer[]): nil;
fun playdate.graphics.setPolygonFillRule(rule: integer): nil;
fun playdate.graphics.setScreenClipRect(rect: _Rect): nil;
fun playdate.graphics.setScreenClipRect(x: integer, y: integer, width: integer, height: integer): nil;
fun playdate.graphics.setStencilImage(image: _Image, tile?: boolean): nil;
fun playdate.graphics.setStencilPattern(level: any, ditherType?: integer): nil;
fun playdate.graphics.setStencilPattern(pattern: integer[]): nil;
fun playdate.graphics.setStencilPattern(row1: integer, row2: integer, row3: integer, row4: integer, row5: integer, row6: integer, row7: integer, row8: integer): nil;
fun playdate.graphics.setStrokeLocation(location: integer): nil;
fun playdate.graphics.unlockFocus(): nil;

global playdate.graphics.animation;

global playdate.graphics.animation.loop;
fun playdate.graphics.animation.loop.new(delay?: number, imageTable?: _ImageTable, shouldLoop?: boolean): _AnimationLoop;
local _AnimationLoop: playdate.graphics.animation.loop = {
    delay: number,
    startFrame: integer,
    endFrame: integer,
    frame: integer,
    step: integer,
    shouldLoop: boolean,
    paused: boolean,
};
fun _AnimationLoop:draw(x: integer, y: integer, flip?: (integer|string)): nil;
fun _AnimationLoop:image(): _Image;
fun _AnimationLoop:isValid(): boolean;
fun _AnimationLoop:setImageTable(imageTable: _ImageTable): nil;

global playdate.graphics.animation.blinker;
fun playdate.graphics.animation.blinker.new(onDuration?: integer, offDuration?: integer, loop?: boolean, cycles?: integer, default?: boolean): _Blinker;
fun playdate.graphics.animation.blinker.stopAll(): nil;
fun playdate.graphics.animation.blinker.updateAll(): nil;
local _Blinker: playdate.graphics.animation.blinker = {
    onDuration: integer,
    offDuration: integer,
    loop: boolean,
    cycles: integer,
    default: boolean,
    counter: integer,
    on: boolean,
    running: boolean,
};
fun _Blinker:remove(): nil;
fun _Blinker:start(onDuration?: integer, offDuration?: integer, loop?: boolean, cycles?: integer, default?: boolean): nil;
fun _Blinker:startLoop(): nil;
fun _Blinker:stop(): nil;
fun _Blinker:update(): nil;

global playdate.graphics.animator;
fun playdate.graphics.animator.new(duration: integer, arc: _Arc, easingFunction?: function, startTimeOffset?: integer): _Animator;
fun playdate.graphics.animator.new(duration: integer, lineSegment: _LineSegment, easingFunction?: function, startTimeOffset?: integer): _Animator;
fun playdate.graphics.animator.new(duration: integer, polygon: _Polygon, easingFunction?: function, startTimeOffset?: integer): _Animator;
fun playdate.graphics.animator.new(duration: integer, startValue: (number|_Point), endValue: (number|_Point), easingFunction?: function, startTimeOffset?: integer): _Animator;
fun playdate.graphics.animator.new(durations: integer, parts: number[], easingFunctions: function[], startTimeOffset?: integer): _Animator;
local _Animator: playdate.graphics.animator = {
    repeatCount: integer,
    reverses: integer,
    easingAmplitude: number,
    easingPeriod: number,
    s?: number,
    a?: number,
    p?: number,
};
fun _Animator:currentValue(): (number|_Point);
fun _Animator:ended(): boolean;
fun _Animator:progress(): number;
fun _Animator:reset(duration?: integer): nil;
fun _Animator:valueAtTime(time: number): (number|_Point);

global playdate.graphics.font = {
    kLanguageEnglish: integer = 0,
    kLanguageJapanese: integer = 1,
    kVariantNormal: integer = 0,
    kVariantBold: integer = 1,
    kVariantItalic: integer = 2,
};
fun playdate.graphics.font.new(path: string): _Font;
fun playdate.graphics.font.newFamily(fontPaths: table<integer, string>): _Font[];
local _Font: playdate.graphics.font;
fun _Font:drawText(text: string, x: integer, y: integer, leadingAdjustment?: integer): nil;
fun _Font:drawTextAligned(text: string, x: integer, y: integer, alignment: integer, leadingAdjustment?: integer): nil;
fun _Font:getGlyph(character: string): _Image;
fun _Font:getHeight(): integer;
fun _Font:getLeading(): integer;
fun _Font:getTextWidth(text: string): integer;
fun _Font:getTracking(): integer;
fun _Font:setLeading(pixels: integer): nil;
fun _Font:setTracking(pixels: integer): nil;

global playdate.graphics.image = {
    kDitherTypeNone: integer = 0,
    kDitherTypeDiagonalLine: integer = 1,
    kDitherTypeHorizontalLine: integer = 3,
    kDitherTypeVerticalLine: integer = 2,
    kDitherTypeScreen: integer = 4,
    kDitherTypeBayer2x2: integer = 5,
    kDitherTypeBayer4x4: integer = 6,
    kDitherTypeBayer8x8: integer = 7,
    kDitherTypeFloydSteinberg: integer = 8,
    kDitherTypeBurkes: integer = 9,
    kDitherTypeAtkinson: integer = 10,
};
local _Image: playdate.graphics.image = {
    x: integer,
    y: integer,
    width: integer,
    height: integer,
};
fun playdate.graphics.image.new(path: string): (image: _Image?, error: string?);
fun playdate.graphics.image.new(width: integer, height: integer, bgcolor?: integer): _Image;
fun playdate.graphics.image:addMask(opaque?: boolean): nil;
fun playdate.graphics.image:blendWithImage(image: _Image, alpha: number, ditherType: integer): _Image;
fun playdate.graphics.image:blurredImage(radius: number, numPasses: integer, ditherType: integer, padEdges?: boolean, xPhase?: integer, yPhase?: integer): _Image;
fun playdate.graphics.image:clear(color: integer): nil;
fun playdate.graphics.image:clearMask(opaque?: boolean): nil;
fun playdate.graphics.image:copy(): _Image;
fun playdate.graphics.image:draw(p: _Point, flip?: (integer|string), sourceRect?: _Rect): nil;
fun playdate.graphics.image:draw(x: integer, y: integer, flip?: (integer|string), sourceRect?: _Rect): nil;
fun playdate.graphics.image:drawAnchored(x: integer, y: integer, ax: number, ay: number, flip?: (integer|string)): nil;
fun playdate.graphics.image:drawBlurred(x: integer, y: integer, radius: number, numPasses: integer, ditherType: integer, flip?: (integer|string), xPhase?: integer, yPhase?: integer): nil;
fun playdate.graphics.image:drawCentered(x: integer, y: integer, flip?: (integer|string)): nil;
fun playdate.graphics.image:drawFaded(x: integer, y: integer, alpha: number, ditherType: integer): nil;
fun playdate.graphics.image:drawIgnoringOffset(p: _Point, flip?: (integer|string)): nil;
fun playdate.graphics.image:drawIgnoringOffset(x: integer, y: integer, flip?: (integer|string)): nil;
fun playdate.graphics.image:drawRotated(x: integer, y: integer, angle: number, scale?: integer, yscale?: integer): nil;
fun playdate.graphics.image:drawSampled(x: integer, y: integer, width: integer, height: integer, centerx: number, centery: number, dxx: number, dyx: number, dxy: number, dyy: number, dx: integer, dy: integer, z: integer, tiltAngle: number, tile: boolean): nil;
fun playdate.graphics.image:drawScaled(x: integer, y: integer, scale: integer, yscale?: integer): nil;
fun playdate.graphics.image:drawTiled(rect: _Rect, flip?: (integer|string)): nil;
fun playdate.graphics.image:drawTiled(x: integer, y: integer, width: integer, height: integer, flip?: (integer|string)): nil;
fun playdate.graphics.image:drawWithTransform(xform: _AffineTransform, x: integer, y: integer): nil;
fun playdate.graphics.image:fadedImage(alpha: number, ditherType: integer): _Image;
fun playdate.graphics.image:getMaskImage(): _Image;
fun playdate.graphics.image:getSize(): (width: integer, height: integer);
fun playdate.graphics.image:hasMask(): boolean;
fun playdate.graphics.image:invertedImage(): _Image;
fun playdate.graphics.image:load(path: string): (success: boolean, error: string?);
fun playdate.graphics.image:removeMask(): nil;
fun playdate.graphics.image:rotatedImage(angle: number, scale?: integer, yscale?: integer): _Image;
fun playdate.graphics.image:sample(x: integer, y: integer): integer;
fun playdate.graphics.image:scaledImage(scale: integer, yscale?: integer): _Image;
fun playdate.graphics.image:setInverted(flag: boolean): nil;
fun playdate.graphics.image:setMaskImage(maskImage: _Image): nil;
fun playdate.graphics.image:transformedImage(xform: _AffineTransform): _Image;
fun playdate.graphics.image:vcrPauseFilterImage(): _Image;
fun playdate.graphics.imageSizeAtPath(path: string): (width: integer, height: integer);
fun playdate.graphics.imageWithText(text: string, maxWidth: integer, maxHeight: integer, backgroundColor?: integer, leadingAdjustment?: integer, truncationString?: string, alignment?: integer, font?: playdate.graphics.font): (image: _Image, textWasTruncated: boolean);

global playdate.graphics.imagetable;
fun playdate.graphics.imagetable.new(count: integer, cellsWide?: integer, cellSize?: integer): _ImageTable;
fun playdate.graphics.imagetable.new(path: string): _ImageTable;
local _ImageTable: playdate.graphics.imagetable;
fun _ImageTable:__index(n: integer): nil;
fun _ImageTable:drawImage(n: integer, x: integer, y: integer, flip?: (integer|string)): nil;
fun _ImageTable:getImage(n: integer): _Image;
fun _ImageTable:getImage(x: integer, y: integer): _Image;
fun _ImageTable:getLength(): integer;
fun _ImageTable:getSize(): (cellsWide: integer, cellsHigh: integer);
fun _ImageTable:load(path: string): (success: boolean, error: string?);
fun _ImageTable:setImage(n: integer, image: _Image): nil;

global playdate.graphics.nineSlice;
fun playdate.graphics.nineSlice.new(imagePath: string, innerX: integer, innerY: integer, innerWidth: integer, innerHeight: integer): _NineSlice;
local _NineSlice: playdate.graphics.nineSlice = {
    innerRect: _Rect,
    minWidth: integer,
    minHeight: integer,
};
fun _NineSlice:drawInRect(rect: _Rect): nil;
fun _NineSlice:drawInRect(x: integer, y: integer, width: integer, height: integer): nil;
fun _NineSlice:getMinSize(): (width: integer, height: integer);
fun _NineSlice:getSize(): (width: integer, height: integer);

global playdate.graphics.sprite = {
    kCollisionTypeSlide: integer = 0,
    kCollisionTypeFreeze: integer = 1,
    kCollisionTypeOverlap: integer = 2,
    kCollisionTypeBounce: integer = 3,
};
fun playdate.graphics.sprite.addDirtyRect(x: integer, y: integer, width: integer, height: integer): nil;
fun playdate.graphics.sprite.addEmptyCollisionSprite(r: _Rect): nil;
fun playdate.graphics.sprite.addEmptyCollisionSprite(x: integer, y: integer, w: integer, h: integer): nil;
fun playdate.graphics.sprite.addSprite(sprite: _Sprite): nil;
fun playdate.graphics.sprite.addWallSprites(tilemap: _TileMap, emptyIDs: integer[], xOffset?: integer, yOffset?: integer): nil;
fun playdate.graphics.sprite.allOverlappingSprites(): _Sprite[][];
fun playdate.graphics.sprite.clearClipRectsInRange(startz: integer, endz: integer): nil;
fun playdate.graphics.sprite.getAllSprites(): _Sprite[];
fun playdate.graphics.sprite.getAlwaysRedraw(): boolean;
fun playdate.graphics.sprite.new(image_or_tilemap?: (_Image|_TileMap)): _Sprite;
fun playdate.graphics.sprite.performOnAllSprites(f: fun(sprite: _Sprite)): nil;
fun playdate.graphics.sprite.querySpriteInfoAlongLine(lineSegment: _LineSegment): _SpriteCollisionInfo[];
fun playdate.graphics.sprite.querySpriteInfoAlongLine(x1: integer, y1: integer, x2: integer, y2: integer): _SpriteCollisionInfo[];
fun playdate.graphics.sprite.querySpritesAlongLine(lineSegment: _LineSegment): _Sprite[];
fun playdate.graphics.sprite.querySpritesAlongLine(x1: integer, y1: integer, x2: integer, y2: integer): _Sprite[];
fun playdate.graphics.sprite.querySpritesAtPoint(p: _Point): _Sprite[];
fun playdate.graphics.sprite.querySpritesAtPoint(x: integer, y: integer): _Sprite[];
fun playdate.graphics.sprite.querySpritesInRect(rect: _Rect): _Sprite[];
fun playdate.graphics.sprite.querySpritesInRect(x: integer, y: integer, width: integer, height: integer): _Sprite[];
fun playdate.graphics.sprite.redrawBackground(): nil;
fun playdate.graphics.sprite.removeAll(): nil;
fun playdate.graphics.sprite.removeSprite(sprite: _Sprite): nil;
fun playdate.graphics.sprite.removeSprites(spriteArray: _Sprite[]): nil;
fun playdate.graphics.sprite.setAlwaysRedraw(flag: boolean): nil;
fun playdate.graphics.sprite.setBackgroundDrawingCallback(drawCallback: fun(x: integer, y: integer, width: integer, height: integer): nil): nil;
fun playdate.graphics.sprite.setClipRectsInRange(rect: _Rect, startz: integer, endz: integer): nil;
fun playdate.graphics.sprite.setClipRectsInRange(x: integer, y: integer, width: integer, height: integer, startz: integer, endz: integer): nil;
fun playdate.graphics.sprite.spriteCount(): integer;
fun playdate.graphics.sprite.spriteWithText(text: string, maxWidth: integer, maxHeight: integer, backgroundColor?: integer, leadingAdjustment?: integer, truncationString?: string, alignment?: integer, font?: _Font): _Sprite;
fun playdate.graphics.sprite.update(): nil;
local _Sprite: playdate.graphics.sprite = {
    x: integer,
    y: integer,
    width: integer,
    height: integer,
    collisionResponse?: (integer|fun(self: _Sprite, other: _Sprite): integer?),
    update?: fun():nil,
};
fun _Sprite:add(): nil;
fun _Sprite:alphaCollision(anotherSprite: _Sprite): boolean;
fun _Sprite:checkCollisions(point: _Point): (actualX: integer, actualY: integer, collisions: _SpriteCollisionData, length: integer);
fun _Sprite:checkCollisions(x: integer, y: integer): (actualX: integer, actualY: integer, collisions: _SpriteCollisionData, length: integer);
fun _Sprite:clearClipRect(): nil;
fun _Sprite:clearCollideRect(): nil;
fun _Sprite:clearStencil(): nil;
fun _Sprite:collisionResponse(other: _Sprite): integer;
fun _Sprite:collisionsEnabled(): boolean;
fun _Sprite:copy(): _Sprite;
fun _Sprite:draw(x: integer, y: integer, width: integer, height: integer): nil;
fun _Sprite:getBounds(): (x: integer, y: integer, width: integer, height: integer);
fun _Sprite:getBoundsRect(): _Rect;
fun _Sprite:getCenter(): (x: number, y: number);
fun _Sprite:getCenterPoint(): _Point;
fun _Sprite:getCollideBounds(): (x: integer, y: integer, width: integer, height: integer);
fun _Sprite:getCollideRect(): _Rect;
fun _Sprite:getCollidesWithGroupsMask(): integer;
fun _Sprite:getGroupMask(): integer;
fun _Sprite:getImage(): _Image;
fun _Sprite:getImageFlip(): integer;
fun _Sprite:getPosition(): (x: integer, y: integer);
fun _Sprite:getRotation(): number;
fun _Sprite:getScale(): (xScale: integer, yScale: integer);
fun _Sprite:getSize(): (width: integer, height: integer);
fun _Sprite:getTag(): integer;
fun _Sprite:getZIndex(): integer;
fun _Sprite:isOpaque(): boolean;
fun _Sprite:isVisible(): boolean;
fun _Sprite:markDirty(): nil;
fun _Sprite:moveBy(x: integer, y: integer): nil;
fun _Sprite:moveTo(x: integer, y: integer): nil;
fun _Sprite:moveWithCollisions(goalPoint: _Point): (actualX: integer, actualY: integer, collisions: _SpriteCollisionData, length: integer);
fun _Sprite:moveWithCollisions(goalX: integer, goalY: integer): (actualX: integer, actualY: integer, collisions: _SpriteCollisionData, length: integer);
fun _Sprite:overlappingSprites(): _Sprite[];
fun _Sprite:remove(): nil;
fun _Sprite:removeAnimator(): nil;
fun _Sprite:resetCollidesWithGroupsMask(): nil;
fun _Sprite:resetGroupMask(): nil;
fun _Sprite:setAnimator(animator: _Animator, moveWithCollisions?: boolean, removeOnCollision?: boolean): nil;
fun _Sprite:setBounds(rect: _Rect): nil;
fun _Sprite:setBounds(x: integer, y: integer, width: integer, height: integer): nil;
fun _Sprite:setCenter(x: integer, y: integer): nil;
fun _Sprite:setClipRect(rect: _Rect): nil;
fun _Sprite:setClipRect(x: integer, y: integer, width: integer, height: integer): nil;
fun _Sprite:setCollideRect(rect: _Rect): nil;
fun _Sprite:setCollideRect(x: integer, y: integer, width: integer, height: integer): nil;
fun _Sprite:setCollidesWithGroups(groups: (integer|integer[])): nil;
fun _Sprite:setCollidesWithGroupsMask(mask: integer): nil;
fun _Sprite:setCollisionsEnabled(flag: boolean): nil;
fun _Sprite:setGroupMask(mask: integer): nil;
fun _Sprite:setGroups(groups: (integer|integer[])): nil;
fun _Sprite:setIgnoresDrawOffset(flag: boolean): nil;
fun _Sprite:setImage(image: _Image, flip?: (integer|string), scale?: integer, yscale?: integer): nil;
fun _Sprite:setImageDrawMode(mode: integer): nil;
fun _Sprite:setImageFlip(flip: (integer|string), flipCollideRect?: integer): nil;
fun _Sprite:setOpaque(flag: boolean): nil;
fun _Sprite:setRedrawsOnImageChange(flag: boolean): nil;
fun _Sprite:setRotation(angle: number, scale?: integer, yScale?: integer): nil;
fun _Sprite:setScale(scale: integer, yScale?: integer): nil;
fun _Sprite:setSize(width: integer, height: integer): nil;
fun _Sprite:setStencilImage(stencil: _Image, tile?: boolean): nil;
fun _Sprite:setStencilPattern(level: any, ditherType?: integer): nil;
fun _Sprite:setStencilPattern(pattern: integer[]): nil;
fun _Sprite:setTag(tag: integer): nil;
fun _Sprite:setTilemap(tilemap: _TileMap): nil;
fun _Sprite:setUpdatesEnabled(flag: boolean): nil;
fun _Sprite:setVisible(flag: boolean): nil;
fun _Sprite:setZIndex(z: integer): nil;
fun _Sprite:update(): nil;
fun _Sprite:updatesEnabled(): boolean;

global playdate.graphics.tilemap;
fun playdate.graphics.tilemap.new(): _TileMap;
local _TileMap: playdate.graphics.tilemap;
fun _TileMap:draw(x: integer, y: integer, sourceRect?: _Rect): nil;
fun _TileMap:drawIgnoringOffset(x: integer, y: integer, sourceRect?: _Rect): nil;
fun _TileMap:getCollisionRects(emptyIDs: integer[]): _Rect[];
fun _TileMap:getPixelSize(): (width: integer, height: integer);
fun _TileMap:getSize(): (width: integer, height: integer);
fun _TileMap:getTileAtPosition(x: integer, y: integer): number?;
fun _TileMap:getTileSize(): (width: integer, height: integer);
fun _TileMap:getTiles(): (data: integer[], width: integer);
fun _TileMap:setImageTable(table: table): nil;
fun _TileMap:setSize(width: integer, height: integer): nil;
fun _TileMap:setTileAtPosition(x: integer, y: integer, index: integer): nil;
fun _TileMap:setTiles(data: integer[], width: integer): nil;

global playdate.graphics.video;
fun playdate.graphics.video.new(path: string): _Video;
local _Video: playdate.graphics.video;
fun _Video:getContext(): _Image;
fun _Video:getFrameCount(): integer;
fun _Video:getFrameRate(): number;
fun _Video:getSize(): (x: integer, y: integer);
fun _Video:renderFrame(number: integer): nil;
fun _Video:setContext(image: _Image): nil;
fun _Video:useScreenContext(): nil;

global playdate.inputHandlers;
fun playdate.inputHandlers.pop(): nil;
fun playdate.inputHandlers.push(handler: table, masksPreviousHandlers?: boolean): nil;

global playdate.keyboard = {
    kCapitalizationNormal: integer = 1,
    kCapitalizationSentences: integer = 3,
    kCapitalizationWords: integer = 2,
    text: string,
};
fun playdate.keyboard.hide(): nil;
fun playdate.keyboard.isVisible(): nil;
fun playdate.keyboard.keyboardAnimatingCallback(): nil;
fun playdate.keyboard.keyboardDidHideCallback(): nil;
fun playdate.keyboard.keyboardDidShowCallback(): nil;
fun playdate.keyboard.keyboardWillHideCallback(): nil;
fun playdate.keyboard.left(): nil;
fun playdate.keyboard.setCapitalizationBehavior(behavior: integer): nil;
fun playdate.keyboard.show(text?: string): nil;
fun playdate.keyboard.textChangedCallback(ok: boolean): nil;
fun playdate.keyboard.width(): nil;

global playdate.math;
fun playdate.math.lerp(min: number, max: number, t: number): number;

global playdate.menu;
local _Menu: playdate.menu;
fun _Menu:addCheckmarkMenuItem(title: string, initialValue?: boolean, callback?: function): nil;
fun _Menu:addMenuItem(title: string, callback: function): nil;
fun _Menu:addOptionsMenuItem(title: string, options: string[], initalValue?: string, callback?: function): nil;
fun _Menu:getMenuItems(): _MenuItem[];
fun _Menu:removeAllMenuItems(): nil;
fun _Menu:removeMenuItem(menuItem: _Menu): nil;

global playdate.menu.item;
local _MenuItem: playdate.menu.item = {
    title: string,
    value: (integer|boolean|string)
};
fun _MenuItem:getTitle(): string;
fun _MenuItem:getValue(): (integer|boolean|string);
fun _MenuItem:setCallback(callback: function): nil;
fun _MenuItem:setTitle(newTitle: string): nil;
fun _MenuItem:setValue(newValue: (integer|boolean|string)): nil;

global playdate.pathfinder;

global playdate.pathfinder.graph;
fun playdate.pathfinder.graph.new(nodeCount?: integer, coordinates?: integer[][]): _PathFinderGraph;
fun playdate.pathfinder.graph.new2DGrid(width: integer, height: integer, allowDiagonals?: boolean, includedNodes?: integer[]): _PathFinderGraph;
local _PathFinderGraph: playdate.pathfinder.graph;
fun _PathFinderGraph:addConnectionToNodeWithID(fromNodeID: integer, toNodeID: integer, weight: number, addReciprocalConnection: boolean): nil;
fun _PathFinderGraph:addConnections(connections: integer[][]): nil;
fun _PathFinderGraph:addNewNode(id: integer, x?: integer, y?: integer, connectedNodes?: _PathFinderNode[], weights?: number[], addReciprocalConnections?: boolean): nil;
fun _PathFinderGraph:addNewNodes(count: integer): nil;
fun _PathFinderGraph:addNode(node: _PathFinderNode, connectedNodes?: _PathFinderNode[], weights?: number[], addReciprocalConnections?: boolean): nil;
fun _PathFinderGraph:addNodes(nodes: _PathFinderNode[]): nil;
fun _PathFinderGraph:allNodes(): _PathFinderNode[];
fun _PathFinderGraph:findPath(startNode: _PathFinderNode, goalNode: _PathFinderNode, heuristicFunction?: fun(startNode: _PathFinderNode, goalNode: _PathFinderNode): integer, findPathToGoalAdjacentNodes?: boolean): _PathFinderNode[];
fun _PathFinderGraph:findPathWithIDs(startNodeID: integer, goalNodeID: integer, heuristicFunction?: fun(startNode: _PathFinderNode, goalNode: _PathFinderNode): integer, findPathToGoalAdjacentNodes?: boolean): integer[];
fun _PathFinderGraph:nodeWithID(id: integer): _PathFinderNode?;
fun _PathFinderGraph:nodeWithXY(x: integer, y: integer): _PathFinderNode?;
fun _PathFinderGraph:removeAllConnections(): nil;
fun _PathFinderGraph:removeAllConnectionsFromNodeWithID(id: integer, removeIncoming?: boolean): nil;
fun _PathFinderGraph:removeNode(node: _PathFinderNode): nil;
fun _PathFinderGraph:removeNodeWithID(id: integer): nil;
fun _PathFinderGraph:removeNodeWithXY(x: integer, y: integer): nil;
fun _PathFinderGraph:setXYForNodeWithID(id: integer, x: integer, y: integer): nil;

global playdate.pathfinder.node;
local _PathFinderNode: playdate.pathfinder.node = {
    x: integer,
    y: integer,
    id: integer,
};
fun _PathFinderNode:addConnection(node: _PathFinderNode, weight: number, addReciprocalConnection: boolean): nil;
fun _PathFinderNode:addConnectionToNodeWithXY(x: integer, y: integer, weight: number, addReciprocalConnection: boolean): nil;
fun _PathFinderNode:addConnections(nodes: _PathFinderNode[], weights: number[], addReciprocalConnections: boolean): nil;
fun _PathFinderNode:connectedNodes(): _PathFinderNode[];
fun _PathFinderNode:removeAllConnections(removeIncoming?: boolean): nil;
fun _PathFinderNode:removeConnection(node: _PathFinderNode, removeReciprocal?: boolean): nil;
fun _PathFinderNode:setXY(x: integer, y: integer): nil;

global playdate.simulator;
fun playdate.simulator.exit(): nil;
fun playdate.simulator.getURL(url: string): string;
fun playdate.simulator.writeToFile(image: _Image, path: string): nil;

global playdate.sound = {
    kFormat8bitMono: integer = 0,
    kFormat8bitStereo: integer = 1,
    kFormat16bitMono: integer = 2,
    kFormat16bitStereo: integer = 3,
    kLFOSquare: integer = 0,
    kLFOTriangle: integer = 1,
    kLFOSine: integer = 2,
    kLFOSampleAndHold: integer = 3,
    kLFOSawtoothUp: integer = 4,
    kLFOSawtoothDown: integer = 5,
    kWaveSquare: integer = 0,
    kWaveTriangle: integer = 1,
    kWaveSine: integer = 2,
    kWaveNoise: integer = 3,
    kWaveSawtooth: integer = 4,
    kWavePOPhase: integer = 5,
    kWavePODigital: integer = 6,
    kWavePOVosim: integer = 7,
};
fun playdate.sound.addEffect(effect: _SoundEffect): nil;
fun playdate.sound.playingSources(): _SoundSource[];
fun playdate.sound.removeEffect(effect: _SoundEffect): nil;
fun playdate.sound.resetTime(): nil;
fun playdate.sound.setOutputsActive(headphones: boolean, speaker: boolean): nil;
fun playdate.sound.getCurrentTime(): number;
fun playdate.sound.getHeadphoneState(changeCallback?: fun(): nil): (headphone: boolean, mic: boolean?);
fun playdate.sound.getSampleRate(): integer;

global playdate.sound.effect;
local _SoundEffect: playdate.sound.effect;

global playdate.sound.bitcrusher: _SoundEffect;
fun playdate.sound.bitcrusher.new(): _BitCrusher;
local _BitCrusher: playdate.sound.bitcrusher;
fun _BitCrusher:setAmount(amt: number): nil;
fun _BitCrusher:setAmountMod(signal: _Signal): nil;
fun _BitCrusher:setMix(level: number): nil;
fun _BitCrusher:setMixMod(signal: _Signal): nil;
fun _BitCrusher:setUndersampling(amt: number): nil;
fun _BitCrusher:setUndersamplingMod(signal: _Signal): nil;

global playdate.sound.onepolefilter: _SoundEffect;
fun playdate.sound.onepolefilter.new(): _OnePoleFilter;
local _OnePoleFilter: playdate.sound.onepolefilter;
fun _OnePoleFilter:setMix(level: number): nil;
fun _OnePoleFilter:setMixMod(signal: _Signal): nil;
fun _OnePoleFilter:setParameter(p: number): nil;
fun _OnePoleFilter:setParameterMod(m: _Signal): nil;

global playdate.sound.overdrive: _SoundEffect;
fun playdate.sound.overdrive.new(): _OverDrive;
local _OverDrive: playdate.sound.overdrive;
fun _OverDrive:setGain(level: number): nil;
fun _OverDrive:setLimit(level: number): nil;
fun _OverDrive:setLimitMod(signal: _Signal): nil;
fun _OverDrive:setMix(level: number): nil;
fun _OverDrive:setMixMod(signal: _Signal): nil;
fun _OverDrive:setOffset(level: number): nil;
fun _OverDrive:setOffsetMod(signal: _Signal): nil;

global playdate.sound.ringmod: _SoundEffect;
fun playdate.sound.ringmod.new(): _RingMod;
local _RingMod: playdate.sound.ringmod;
fun _RingMod:setFrequency(f: number): nil;
fun _RingMod:setFrequencyMod(signal: _Signal): nil;
fun _RingMod:setMix(level: number): nil;
fun _RingMod:setMixMod(signal: _Signal): nil;

global playdate.sound.delayline: _SoundEffect;
fun playdate.sound.delayline.new(length: number): _DelayLine;
local _DelayLine: playdate.sound.delayline;
fun _DelayLine:addTap(delay: number): _DelayLineTap;
fun _DelayLine:setFeedback(level: number): nil;
fun _DelayLine:setMix(level: number): nil;
fun _DelayLine:setMixMod(signal: _Signal): nil;

global playdate.sound.twopolefilter: _SoundEffect;
fun playdate.sound.twopolefilter.new(type: integer): _TwoPoleFilter;
local _TwoPoleFilter: playdate.sound.twopolefilter;
fun _TwoPoleFilter:setFrequency(f: number): nil;
fun _TwoPoleFilter:setFrequencyMod(signal: _Signal): nil;
fun _TwoPoleFilter:setGain(g: number): nil;
fun _TwoPoleFilter:setMix(level: number): nil;
fun _TwoPoleFilter:setMixMod(signal: _Signal): nil;
fun _TwoPoleFilter:setResonance(r: _Rect): nil;
fun _TwoPoleFilter:setResonanceMod(signal: _Signal): nil;
fun _TwoPoleFilter:setType(type: integer): nil;

global playdate.sound.channel;
fun playdate.sound.channel.new(): _Channel;
local _Channel: playdate.sound.channel;
fun _Channel:addEffect(effect: _SoundEffect): nil;
fun _Channel:addSource(source: _SoundSource): nil;
fun _Channel:getVolume(): number;
fun _Channel:remove(): nil;
fun _Channel:removeEffect(effect: _SoundEffect): nil;
fun _Channel:removeSource(source: _SoundSource): nil;
fun _Channel:setPan(pan: number): number;
fun _Channel:setPanMod(signal: _Signal): nil;
fun _Channel:setVolume(volume: number): nil;
fun _Channel:setVolumeMod(signal: _Signal): nil;

global playdate.sound.signal;
local _Signal: playdate.sound.signal;
fun _Signal:setOffset(offset: number): nil;
fun _Signal:setScale(scale: integer): nil;

global playdate.sound.controlsignal: _Signal;
fun playdate.sound.controlsignal.new(): _ControlSignal;
local _ControlSignal: playdate.sound.controlsignal = {
    events: _SoundControlEvent
};
fun _ControlSignal:addEvent(event: table): nil;
fun _ControlSignal:addEvent(step: integer, value: number, interpolate?: boolean): nil;
fun _ControlSignal:clearEvents(): nil;
fun _ControlSignal:getControllerType(): integer;
fun _ControlSignal:setControllerType(number: integer): nil;

global playdate.sound.envelope: _Signal;
fun playdate.sound.envelope.new(attack?: number, decay?: number, sustain?: number, release?: number): _Envelope;
local _Envelope: playdate.sound.envelope;
fun _Envelope:setAttack(attack: number): nil;
fun _Envelope:setCurvature(amount: number): nil;
fun _Envelope:setDecay(decay: number): nil;
fun _Envelope:setGlobal(flag: boolean): nil;
fun _Envelope:setLegato(flag: boolean): nil;
fun _Envelope:setOffset(offset: number): nil;
fun _Envelope:setRateScaling(scaling: number, start?: number, _end: number): nil;
fun _Envelope:setRelease(release: number): nil;
fun _Envelope:setRetrigger(flag: boolean): nil;
fun _Envelope:setScale(scale: integer): nil;
fun _Envelope:setSustain(sustain: number): nil;
fun _Envelope:setVelocitySensitivity(amount: number): nil;
fun _Envelope:trigger(velocity: number, length?: number): nil;

global playdate.sound.lfo: _Signal;
fun playdate.sound.lfo.new(type?: integer): _LFO;
local _LFO: playdate.sound.lfo;
fun _LFO:setArpeggio(note1: number, ...: number): nil;
fun _LFO:setCenter(center: number): nil;
fun _LFO:setDelay(holdoff: number, ramp: number): nil;
fun _LFO:setDepth(depth: number): nil;
fun _LFO:setGlobal(flag: boolean): nil;
fun _LFO:setPhase(phase: number): nil;
fun _LFO:setRate(rate: number): nil;
fun _LFO:setRetrigger(flag: boolean): nil;
fun _LFO:setType(type: integer): nil;

global playdate.sound.source;
local _SoundSource;

global playdate.sound.delaylinetap: _SoundSource;
local _DelayLineTap: playdate.sound.delaylinetap;
fun _DelayLineTap:getVolume(): number;
fun _DelayLineTap:setDelay(time: number): nil;
fun _DelayLineTap:setDelayMod(signal: _Signal): nil;
fun _DelayLineTap:setFlipChannels(flag: boolean): nil;
fun _DelayLineTap:setVolume(level: number): nil;

global playdate.sound.fileplayer: _SoundSource;
fun playdate.sound.fileplayer.new(buffersize?: number): _FilePlayer;
fun playdate.sound.fileplayer.new(path: string, buffersize?: number): _FilePlayer;
local _FilePlayer: playdate.sound.fileplayer;
fun _FilePlayer:didUnderrun(): boolean;
fun _FilePlayer:getLength(): number;
fun _FilePlayer:getOffset(): number;
fun _FilePlayer:getRate(): number;
fun _FilePlayer:getVolume(): (left_or_mono: number, right: number?);
fun _FilePlayer:isPlaying(): boolean;
fun _FilePlayer:load(path: string): nil;
fun _FilePlayer:pause(): nil;
fun _FilePlayer:play(repeatCount?: integer): (success: boolean, error: string?);
fun _FilePlayer:setBufferSize(seconds: number): nil;
fun _FilePlayer:setFinishCallback(func: fun(self: _FilePlayer, arg?: any), arg?: any): nil;
fun _FilePlayer:setLoopCallback(callback: fun(self: _FilePlayer, arg?: any), arg?: any): nil;
fun _FilePlayer:setLoopRange(start: number, _end: number, loopCallback?: fun(arg?: any): nil, arg?: any): nil;
fun _FilePlayer:setOffset(seconds: number): nil;
fun _FilePlayer:setRate(rate: integer): nil;
fun _FilePlayer:setRateMod(signal: _Signal): nil;
fun _FilePlayer:setStopOnUnderrun(flag: boolean): nil;
fun _FilePlayer:setVolume(left: number, right?: number, fadeSeconds?: number, fadeCallback?: fun(self: _FilePlayer, arg?: any), arg?: any): nil;
fun _FilePlayer:stop(): nil;

global playdate.sound.instrument: _SoundSource;
fun playdate.sound.instrument.new(synth?: _Synth): _Instrument;
local _Instrument: playdate.sound.instrument;
fun _Instrument:addVoice(v: _Vector2D, note?: integer, rangeend?: integer, transpose?: integer): nil;
fun _Instrument:allNotesOff(): nil;
fun _Instrument:getVolume(): (left_or_mono: number, right: number?);
fun _Instrument:noteOff(note: integer, when?: number): nil;
fun _Instrument:playMIDINote(note: (number|string), vel?: number, length?: number, when?: number): nil;
fun _Instrument:playNote(frequency: number, vel?: number, length?: number, when?: number): nil;
fun _Instrument:setTranspose(halfsteps: number): nil;
fun _Instrument:setVolume(left: integer, right?: integer): nil;

global playdate.sound.sampleplayer: _SoundSource;
fun playdate.sound.sampleplayer.new(path: string): _SamplePlayer;
fun playdate.sound.sampleplayer.new(sample: _Sample): _SamplePlayer;
local _SamplePlayer: playdate.sound.sampleplayer;
fun _SamplePlayer:copy(): _SamplePlayer;
fun _SamplePlayer:getLength(): number;
fun _SamplePlayer:getOffset(): number;
fun _SamplePlayer:getRate(): number;
fun _SamplePlayer:getSample(): _Sample;
fun _SamplePlayer:getVolume(): (left_or_mono: number, right: number?);
fun _SamplePlayer:isPlaying(): boolean;
fun _SamplePlayer:play(repeatCount?: integer, rate?: integer): nil;
fun _SamplePlayer:playAt(when: number, vol?: number, rightvol?: number, rate?: integer): nil;
fun _SamplePlayer:setFinishCallback(func: function, arg?: any): nil;
fun _SamplePlayer:setLoopCallback(callback: function, arg?: any): nil;
fun _SamplePlayer:setOffset(seconds: number): nil;
fun _SamplePlayer:setPaused(flag: boolean): nil;
fun _SamplePlayer:setPlayRange(start: integer, _end: integer): nil;
fun _SamplePlayer:setRate(rate: integer): nil;
fun _SamplePlayer:setRateMod(signal: _Signal): nil;
fun _SamplePlayer:setSample(sample: _Sample): nil;
fun _SamplePlayer:setVolume(left: integer, right?: integer): nil;
fun _SamplePlayer:stop(): nil;

global playdate.sound.synth: _SoundSource;
fun playdate.sound.synth.new(sample: _Sample, sustainStart?: number, sustainEnd?: number): _Synth;
fun playdate.sound.synth.new(waveform?: integer): _Synth;
local _Synth: playdate.sound.synth;
fun _Synth:copy(): _Synth;
fun _Synth:getEnvelope(): _Envelope;
fun _Synth:getVolume(): (left_or_mono: number, right: number?);
fun _Synth:isPlaying(): boolean;
fun _Synth:noteOff(): nil;
fun _Synth:playMIDINote(note: (number|string), volume?: number, length?: number, when?: number): boolean;
fun _Synth:playNote(pitch: (number|string), volume?: number, length?: number, when?: number): boolean;
fun _Synth:setADSR(attack: number, decay: number, sustain: number, release: number, curvature: number): nil;
fun _Synth:setAmplitudeMod(signal: _Signal): nil;
fun _Synth:setAttack(time: number): nil;
fun _Synth:setDecay(time: number): nil;
fun _Synth:setEnvelopeCurvature(amount: number): nil;
fun _Synth:setFinishCallback(_function: function): nil;
fun _Synth:setFrequencyMod(signal: _Signal): nil;
fun _Synth:setLegato(flag: boolean): nil;
fun _Synth:setParameter(parameter: integer, value: number): nil;
fun _Synth:setParameterMod(parameter: integer, signal: _Signal): nil;
fun _Synth:setRelease(time: number): nil;
fun _Synth:setSustain(level: number): nil;
fun _Synth:setVolume(left: integer, right?: integer): nil;
fun _Synth:setWaveform(waveform: integer): nil;
fun _Synth:stop(): nil;

global playdate.sound.micinput;
fun playdate.sound.micinput.getLevel(): number;
fun playdate.sound.micinput.getSource(): string;
fun playdate.sound.micinput.recordToSample(buffer: _Sample, completionCallback: fun(sample: _Sample): nil): nil;
fun playdate.sound.micinput.startListening(): nil;
fun playdate.sound.micinput.stopListening(): nil;
fun playdate.sound.micinput.stopRecording(): nil;

global playdate.sound.sample;
fun playdate.sound.sample.new(path: string): _Sample;
local _Sample: playdate.sound.sample;
fun _Sample:getFormat(): integer;
fun _Sample:getLength(): (sample_seconds: number, buffer_size_seconds: number);
fun _Sample:getSampleRate(): integer;
fun _Sample:getSubsample(startOffset: integer, endOffset: integer): _Sample;
fun _Sample:load(path: string): boolean;
fun _Sample:play(repeatCount?: integer, rate?: integer): nil;
fun _Sample:playAt(when: number, vol?: number, rightvol?: number, rate?: integer): nil;
fun _Sample:save(filename: string): nil;

global playdate.sound.sequence;
fun playdate.sound.sequence.new(midi_path: string): _Sequence;
local _Sequence: playdate.sound.sequence;
fun _Sequence:addTrack(track?: _Track): nil;
fun _Sequence:allNotesOff(): nil;
fun _Sequence:getCurrentStep(): number;
fun _Sequence:getLength(): number;
fun _Sequence:getTempo(): number;
fun _Sequence:getTrackAtIndex(n: integer): _Track;
fun _Sequence:getTrackCount(): integer;
fun _Sequence:goToStep(step: integer, play?: boolean): nil;
fun _Sequence:isPlaying(): boolean;
fun _Sequence:play(finishCallback?: fun(self: _Sequence): nil): nil;
fun _Sequence:setLoops(loopCount: integer): nil;
fun _Sequence:setLoops(startStep: integer, endStep: integer, loopCount?: integer): nil;
fun _Sequence:setTempo(stepsPerSecond: number): nil;
fun _Sequence:setTrackAtIndex(n: integer, track: _Track): nil;
fun _Sequence:stop(): nil;

global playdate.sound.track;
fun playdate.sound.track.new(): playdate.sound.track;
local _Track: playdate.sound.track;
fun _Track:addControlSignal(s: _ControlSignal): nil;
fun _Track:addNote(step: integer, note: (string|integer), length: number, velocity?: number): nil;
fun _Track:addNote(table: (_SoundTrackNoteIn|_SoundTrackNote)): nil;
fun _Track:clearNotes(): nil;
fun _Track:getControlSignals(): _ControlSignal[];
fun _Track:getInstrument(): _Instrument;
fun _Track:getLength(): integer;
fun _Track:getNotes(step?: integer, endstep?: integer): _SoundTrackNote[];
fun _Track:getNotesActive(): integer;
fun _Track:getPolyphony(): integer;
fun _Track:removeNote(step: integer, note: integer): nil;
fun _Track:setInstrument(inst: _Instrument): nil;
fun _Track:setMuted(flag: boolean): nil;
fun _Track:setNotes(list: table[]): nil;

global playdate.sound.track;
local _SoundTrackNote: table = {
    step: integer,
    note: number,
    length: integer,
    velocity: number,
};
local _SoundTrackNoteIn: table = {
    step: integer,
    note: (number|string),
    length: integer,
    velocity: number,
};

global playdate.string;
fun playdate.string.UUID(length: number): string;
fun playdate.string.trimLeadingWhitespace(string: string): string;
fun playdate.string.trimTrailingWhitespace(string: string): string;
fun playdate.string.trimWhitespace(string: string): string;

global playdate.timer;
fun playdate.timer.allTimers(): _Timer[];
fun playdate.timer.keyRepeatTimer(callback: function, ...: any): _Timer;
fun playdate.timer.keyRepeatTimerWithDelay(delayAfterInitialFiring: integer, delayAfterSecondFiring: integer, callback: function, ...: any): _Timer;
fun playdate.timer.new(duration: integer, callback: function, ...: any): _Timer;
fun playdate.timer.new(duration: integer, startValue?: number, endValue?: number, easingFunction?: function): _Timer;
fun playdate.timer.performAfterDelay(delay: integer, callback: function, ...: any): nil;
fun playdate.timer.updateCallback(...: any): nil;
fun playdate.timer.updateTimers(): nil;
local _Timer: playdate.timer = {
    currentTime: integer,
    delay: integer,
    discardOnCompletion: boolean,
    duration: integer,
    timeLeft: integer,
    repeats: boolean,
    reverses: boolean,
    timerEndedArgs: any[]
};
fun _Timer:pause(): nil;
fun _Timer:remove(): nil;
fun _Timer:reset(): nil;
fun _Timer:start(): nil;

global playdate.ui;

global playdate.ui.crankIndicator = {
    clockwise: boolean,
};
fun playdate.ui.crankIndicator:start(): nil;
fun playdate.ui.crankIndicator:update(): nil;

global playdate.ui.gridview;
fun playdate.ui.gridview.new(cellWidth: integer, cellHeight: integer): _GridView;
local _GridView: playdate.ui.gridview = {
    needsDisplay:boolean,
    backgroundImage: (_Image|_NineSlice),
    isScrolling:boolean,
    scrollEasingFunction:fun(t:number, b:number, c:number, d:number, a?:number, p?:number): number,
    easingAmplitude?: number, easingPeriod?: number,
    changeRowOnColumnWrap: boolean,
    scrollCellsToCenter: boolean,
};
fun _GridView:addHorizontalDividerAbove(section: integer, row: integer): nil;
fun _GridView:drawCell(section: integer, row: integer, column: integer, selected: boolean, x: integer, y: integer, width: integer, height: integer): nil;
fun _GridView:drawHorizontalDivider(x: integer, y: integer, width: integer, height: integer): nil;
fun _GridView:drawInRect(x: integer, y: integer, width: integer, height: integer): nil;
fun _GridView:drawSectionHeader(section: integer, x: integer, y: integer, width: integer, height: integer): nil;
fun _GridView:getCellBounds(section: integer, row: integer, column: integer, gridWidth?: integer): (x: integer, y: integer, width: integer, height: integer);
fun _GridView:getHorizontalDividerHeight(): integer;
fun _GridView:getNumberOfColumns(): integer;
fun _GridView:getNumberOfRowsInSection(section: integer): integer;
fun _GridView:getNumberOfSections(): integer;
fun _GridView:getScrollPosition(): (x: integer, y: integer);
fun _GridView:getSectionHeaderHeight(): integer;
fun _GridView:getSelectedRow(): integer;
fun _GridView:getSelection(): (section: integer, row: integer, column: integer);
fun _GridView:removeHorizontalDividers(): nil;
fun _GridView:scrollCellToCenter(section: integer, row: integer, column: integer, animated?: boolean): nil;
fun _GridView:scrollToCell(section: integer, row: integer, column: integer, animated?: boolean): nil;
fun _GridView:scrollToRow(row: integer, animated?: boolean): nil;
fun _GridView:scrollToTop(animated?: boolean): nil;
fun _GridView:selectNextColumn(wrapSelection: boolean, scrollToSelection?: boolean, animate?: boolean): nil;
fun _GridView:selectNextRow(wrapSelection: boolean, scrollToSelection?: boolean, animate?: boolean): nil;
fun _GridView:selectPreviousColumn(wrapSelection: boolean, scrollToSelection?: boolean, animate?: boolean): nil;
fun _GridView:selectPreviousRow(wrapSelection: boolean, scrollToSelection?: boolean, animate?: boolean): nil;
fun _GridView:setCellPadding(left: integer, right: integer, top: integer, bottom: integer): nil;
fun _GridView:setCellSize(cellWidth: integer, cellHeight: integer): nil;
fun _GridView:setContentInset(left: integer, right: integer, top: integer, bottom: integer): nil;
fun _GridView:setHorizontalDividerHeight(height: integer): nil;
fun _GridView:setNumberOfColumns(num: integer): nil;
fun _GridView:setNumberOfRows(...: integer): nil;
fun _GridView:setNumberOfRowsInSection(section: integer, num: integer): nil;
fun _GridView:setNumberOfSections(num: integer): nil;
fun _GridView:setScrollDuration(ms: integer): nil;
fun _GridView:setScrollPosition(x: integer, y: integer, animated?: boolean): nil;
fun _GridView:setSectionHeaderHeight(height: integer): nil;
fun _GridView:setSectionHeaderPadding(left: integer, right: integer, top: integer, bottom: integer): nil;
fun _GridView:setSelectedRow(row: integer): nil;
fun _GridView:setSelection(section: integer, row: integer, column: integer): nil;

global table;
fun table.create(arrayCount: integer, hashCount: integer): table;
fun table.deepcopy(source: table): table;
fun table.getsize(table: table): (arrayCount: integer, hashCount: integer);
fun table.indexOfElement(table: table, element: any): integer?;
fun table.shallowcopy(source: table, destination?: table): table;

fun class(name: string): _Class;
local _Class = {
    extends: fun(parentClass: any): nil,
    super: table,
};

fun where(): string;
fun print(...: any): nil;
fun printTable(table: table): nil;
fun sample(name: string, _function: function): nil;

local _DateTime = {
    year: integer,
    month: integer,
    day: integer,
    weekday: integer,
    hour: integer,
    minute: integer,
    second: integer,
    millisecond: integer,
};
local _InputHandler = {
    _AButtonDown?: fun(),
    _AButtonHeld?: fun(),
    _AButtonUp?: fun(),
    _BButtonDown?: fun(),
    _BButtonHeld?: fun(),
    _BButtonUp?: fun(),
    downButtonDown?: fun(),
    downButtonUp?: fun(),
    leftButtonDown?: fun(),
    leftButtonUp?: fun(),
    rightButtonDown?: fun(),
    rightButtonUp?: fun(),
    upButtonDown?: fun(),
    upButtonUp?: fun(),
    cranked?: fun(change:number, acceleratedChange:number)
};
local _Metadata = {
    name: string,
    author: string,
    description: string,
    bundleID: string,
    version: string,
    buildNumber: integer,
    pdxversion: integer,
    imagePath?: string,
    launchSoundPath?: string,
    contentWarning?: string,
    contentWarning2?: string,
};
local _ModTime = {
    year: integer,
    month: integer,
    day: integer,
    hour: integer,
    minute: integer,
    second: integer,
};
local _PowerStatus = {
    charging: boolean,
    _USB: boolean,
    screws: boolean,
};
local _SoundControlEvent = {
    step: integer,
    value: number,
    interpolate?: boolean,
};
local _SpriteCollisionData = {
    sprite: _Sprite,
    other: _Sprite,
    type: integer,
    overlaps: boolean,
    ti: number,
    move: _Vector2D,
    normal: _Vector2D,
    touch: _Point,
    spriteRect: _Rect,
    otherRect: _Rect,
    bounce?: _Point,
    slide?: _Point,
};
local _SpriteCollisionInfo = {
    sprite: _Sprite,
    entryPoint: _Point,
    exitPoint: _Point,
    t1: number,
    t2: number,
};
local _SystemInfo = {
    buildtime: string,
    commit: string,
    pdxcompatversion: integer,
    pdxversion: integer,
};
